#!/usr/bin/env kpython3

# inherent python libraries
from configparser import ConfigParser
from atexit import register, unregister
from time import sleep
from signal import signal, SIGHUP, SIGTERM
from subprocess import Popen
from argparse import ArgumentParser
import sys, os, logging

# installs
from pipython import GCSDevice
from pipython.gcserror import GCSError
import numpy as np
from posix_ipc import Semaphore, O_CREX, ExistentialError

# nfiuserver libraries
from KPIC_shmlib import Shm
from NPS_cmds import NPS_cmds

"""
THIS IS A CONTROL SCRIPT FOR THE FIBER INJECTION UNIT'S TRACKING CAMERA
PICKOFF AND NOT FOR USE BY USER

See TCP_cmds or type TCP in terminal to control the stage
"""

devnm = "/dev/ttyUSB0"
baud = "9600"

# This script is not an import
if __name__ != "__main__":
    print("TCP_Control is not meant to be used as an import.")
    sys.exit()

# info is most of what we'll be using from logging, so make a shorter command for it
info = logging.info

class NPSError(Exception):
    """An exception to be thrown if there is an error with the NPS"""
    pass

class AlreadyAlive(Exception):
    """An exception to be thrown if control code is initialized twice."""
    pass

def move(target:float) -> int:
    """Moves device to target position

    Args:
        target = the position to move to
    Returns:
        int = error code
    """

    # if we're not connected to the device, return error
    if not dev.IsConnected(): return 4

    err = 0

    if not (dev.qSVO()["1"] and dev.qFRF()["1"]): 
        info("Movement requested in open loop.")
        return 2

    if target < limits[0] or target > limits[1]: 
        info("Movement {} requested outside limits {}.".format(target, limits))
        return 3

    try: dev.MOV({"1":target})
    except GCSError: err = 1

    return err

def do_state() -> int:
    """Sends desired state to controller

    Returns:
        int = any error
    """

    err = 0

    req = format(Stat_P.get_data()[0], "08b")
    cur = format(Stat_D.get_data()[0], "08b")

    # kill script if requested
    if req[-1] == "0": signal_handler(0, 0); return

    starting = False
    # turn device on/off as requested
    if req[-2] == "1" and cur[-2] == "0": 
        err = device_on()
        # if we can't move, update P shms
        if not CAN_MOVE:
            Stat_P.set_data(Stat_D.get_data())
            try: Pos_P.set_data(np.array([dev.qPOS()["1"]], Pos_P.npdtype))
            except GCSError: err = 1
            return err
        starting = True
        cur = format(Stat_D.get_data()[0], "08b")
    elif req[-2] == "0" and cur[-2] == "1": return device_off()

    # close the loop and home if requested
    if req[-3] == "1" and (cur[-3] == "0" or starting):
        try:
            if not dev.qSVO()["1"]: dev.SVO({"1":True})
            if not dev.qFRF()["1"]: dev.FRF()
        except GCSError: err = 1
    # open the loop if requested
    elif req[-3] == "0" and (cur[-3] == "1" or starting):
        try:
            if dev.qSVO()["1"]: dev.SVO({"1":False})
        except GCSError: err = 1

    try:
        readybit = "1" if (dev.qSVO()["1"] and dev.qFRF()["1"]) else "0"
    except GCSError:
        err = 1
        readybit = "0"
    cur = cur[:-3] + readybit + cur[-2:]
    # update state shared memory
    Stat_D.set_data(np.array([int(cur, 2)], Stat_D.npdtype))

    # if we just turned on and can move, move
    if starting: 
        if err == 0: err = move(Stat_P.get_data()[0])
        else: move(Stat_P.get_data()[0])

    return err

def device_off() -> int:
    """Disconnects from and turns off controller
    
    Returns:
        int = error code
    """

    err = 0

    try:
        if dev.IsConnected():
            dev.SVO({"1":False})
            dev.CloseConnection()
    except GCSError: err = 1

    # TODO: add NPS support

    # get the current status
    stat = Stat_D.get_data()
    # convert status to bits
    bits = format(stat[0], "08b")
    # set device power bit and device ready bit to "0"
    bits = bits[:-3] + "00" + bits[-1]
    # store new status
    stat[0] = int(bits, 2)
    Stat_D.set_data(stat)

    return err

def device_on() -> int:
    """Turns on and connects to controller and then loads limits
    
    Returns:
        int = any error
    """

    err = 0

    # TODO: add NPS support, check for if device is already on

    # connect both controllers
    if not dev.IsConnected():
        try: dev.ConnectRS232(devnm, baud)
        except GCSError: err = 1

        # define limits as the larger of the min values between config file and software limits, vice 
        #   versa for maxes
        global limits
        try:
            limits = [max(dev.qTMN()["1"], config.getfloat("Limits", "min")),
                min(dev.qTMX()["1"], config.getfloat("Limits", "max"))]
        except GCSError: err = 1

    # get the current status
    stat = Stat_D.get_data()
    # convert status to bits
    bits = format(stat[0], "08b")
    # set device power bit to "1"
    # set device ready bit to "1" if device is closed loop and homed
    try: bits = bits[:-3] + str(int(dev.qSVO()["1"] and dev.qFRF()["1"])) + "1" + bits[-1]
    except GCSError: 
        bits = bits[:-2] + "1" + bits[-1]
        err = 1
    # store new status
    stat[0] = int(bits, 2)
    Stat_D.set_data(stat)

    return err

def main():
    """The main loop"""

    while alive:

        # wait for one of the shms to be updated
        ShmP.acquire()

        # check to see if we should end
        if not alive: return

        errs = 0
        errp = 0

        # first make any changes requested in Stat_P
        if Stat_P.mtdata["cnt0"] != Stat_P.get_counter():
            errs = do_state()

        # then make any changed requested in Pos_P
        if Pos_P.mtdata["cnt0"] != Pos_P.get_counter():
            errp = move(Pos_P.get_data()[0])

        # wait if device is moving (for no longer than 5 seconds)
        cnt = 0
        while cnt < 50 and dev.IsMoving(): sleep(.1); cnt += 1

        # update position of device
        try: curpos = dev.qPOS()["1"]
        except GCSError:
            errp = 1
            curpos = Stat_D.get_data()
        Pos_D.set_data(np.array([curpos], Pos_D.npdtype))

        # prioritize errors that arose when setting status
        if errs != 0 or errp == 0: Error.set_data(np.array([errs], Error.npdtype))
        elif errp != 0: Error.set_data(np.array([errp], Error.npdtype))

def close():
    """A cleanup method

    Closes all communication with the device, deletes command share memory,
    and closes the tmux session.
    """

    info("Killing draw process.")
    try: draw_proc.terminate()
    except Exception as ouch: info("Exception on close: {}".format(ouch))

    info("Deleting command shared memory file.")
    # We want to delete all command shared memories so scripts can't
    #   mistakenly think the control script is alive
    try:
        for shm in [Stat_P, Pos_P]:
            try: os.remove(shm.fname)
            except Exception as ouch: info("Exception on close: {}".format(ouch))
    except Exception as ouch: info("Exception on close: {}".format(ouch))

    info("Checking if device is connected")
    try: device_off()
    except Exception as ouch: info("Exception on close: {}".format(ouch))

    info("Updating Stat_D file")
    try:
        # get the current status to avoid changing anything other than script bit
        stat = Stat_D.get_data()
        # convert to 8 bit binary
        bits = format(stat[0], "08b")
        # set script bit to 0
        bits = bits[:-1] + "0"
        # store new status
        stat[0] = bits
        Stat_D.set_data(stat)
    except Exception as ouch: info("Exception on close: {}".format(ouch))

    info("Killing semaphore listening process")
    try:
        for proc in Sem_Listeners:
            try: proc.terminate()
            except Exception as ouch: info("Exception on close: {}".format(ouch))
    except Exception as ouch: info("Exception on close: {}".format(ouch))

    info("Unlinking subscription semaphore")
    try: ShmP.unlink()
    except Exception as ouch: info("Exception on close: {}".format(ouch))

    info("Closing tmux session")
    # unregister this method now that it's completed to avoid running it twice
    unregister(close)
    os.system(config.get("Environment", "end_command"))

def signal_handler(signum, stack):
    """A method to gracefully end script when a signal is passed"""
    global alive
    alive = False
    try: ShmP.release()
    except: pass

RELDIR = os.environ.get("RELDIR")
if RELDIR[-1] == "/": RELDIR = RELDIR[-1]

# when alive is set to False, the script will end
alive = True

# read config file
config = ConfigParser()
config.read(RELDIR+"/data/TCP.ini")

log_path = config.get("Communication", "debug_log")
debug_format = "%(filename)s.%(funcName)s@%(asctime)s - %(levelname)s: %(message)s"

parser = ArgumentParser()
# boolean flag for CAN_MOVE
parser.add_argument("-m", action = "store_true")
# flags to set debug modes
parser.add_argument("-d", default = -1, nargs = "?")
parser.add_argument("-d!", "--dd", default = -1, nargs = "?")

args = parser.parse_args()

# whether this device can move on startup
CAN_MOVE = args.m

if args.dd != -1:
    if not args.dd is None: log_path = args.dd
    logging.basicConfig(format = debug_format, datefmt = "%H:%M:%S",
        filename = log_path)
    logging.root.setLevel(logging.DEBUG)
elif args.d != -1:
    if not args.d is None: log_path = args.d
    logging.basicConfig(format = debug_format, datefmt = "%H:%M:%S",
        filename = log_path)
    logging.root.setLevel(logging.INFO)

# make the folder for shared memories if it doesn't already exist
if not os.path.isdir("/tmp/TCP"): os.mkdir("/tmp/TCP")

# create a dictionary to translate strings into numpy data types
type_ = {"int8":np.int8, "int16":np.int16, "int32":np.int32, "int64":np.int64,
    "uint8":np.uint8, "uint16":np.uint16, "uint32":np.uint32,
    "uint64":np.uint64, "intp":np.intp, "uintp":np.uintp, "float16":np.float16,
    "float32":np.float32, "float64":np.float64, "complex64":np.complex64,
    "complex128":np.complex128}

# connect to Stat_D to see if there's already a control script running
Stat_D = config.get("Shm Info", "Stat_D").split(",")
if os.path.isfile(Stat_D[0]):
    Stat_D = Shm(Stat_D[0])
    
    bits = format(Stat_D.get_data()[0], "08b")
    if bits[-1] == "1":
        info("Active control script exists. Raising exception.")
        msg = "State shared memory status {}.".format(int(bits, 2))
        raise AlreadyAlive(msg)
    else:
        bits = bits[:-1] + "1"
        Stat_D.set_data(np.array([int(bits, 2)], Stat_D.npdtype))
else:
    info("No Stat_D shared memory file. Creating file.")
    Stat_D = Shm(Stat_D[0], data = np.array([1], dtype = type_[Stat_D[1]]),
        mmap = (Stat_D[2] == "1"))

info("No duplicate control script, continuing with initialization")

# connect to rest of state shms
Pos_D = config.get("Shm Info", "Pos_D").split(",")
if os.path.isfile(Pos_D[0]): Pos_D = Shm(Pos_D[0])
else:
    info("No Pos_D shared memory file. Creating file.")
    Pos_D = Shm(Pos_D[0], data = np.array([-5000.], dtype = type_[Pos_D[1]]),
        mmap = (Pos_D[2] == "1"))

Error = config.get("Shm Info", "Error").split(",")
if os.path.isfile(Error[0]): Error = Shm(Error[0])
else:
    info("No Error shared memory file. Creating file.")
    Error = Shm(Error[0], data = np.array([0], dtype = type_[Error[1]]),
        mmap = (Error[2] == "1"))

# register cleanup methods
register(close)
signal(SIGHUP, signal_handler)
signal(SIGTERM, signal_handler)

# create a subscription semaphore to link all P shms
ShmP = Semaphore(None, flags = O_CREX)

# create a list to store processes that are updating semaphores
#   (to be killed at close)
Sem_Listeners = []

Stat_P = config.get("Shm Info", "Stat_P").split(",")
Stat_P = Shm(Stat_P[0], data = np.array([1], dtype = type_[Stat_P[1]]),
    sem = True, mmap = (Stat_P[2] == "1"))
Sem_Listeners.append(Popen(["linksem", Stat_P.sem.name, ShmP.name]))

Pos_P = config.get("Shm Info", "Pos_P").split(",")
Pos_P = Shm(Pos_P[0], data = np.array([-5000.], dtype = type_[Pos_P[1]]),
    sem = True, mmap = (Pos_P[2] == "1"))
Sem_Listeners.append(Popen(["linksem", Pos_P.sem.name, ShmP.name]))

def Punlink():
    """Tries to unlink the lock semaphores on the P shms"""

    try: Stat_P.lock.unlink()
    except (AttributeError, ExistentialError) as ouch:
        info("Exception on close: {}.".format(ouch))

    try: Pos_P.lock.unlink()
    except (AttributeError, ExistentialError) as ouch:
        info("Exception on close: {}.".format(ouch))

# We want to register P shm unlock after creating P shms so they aren't cleaned
#   up before we have a change to unlink (delete) the lock
register(Punlink)
signal(SIGHUP, signal_handler)
signal(SIGTERM, signal_handler)

info("Shared memories created successfully.")

# TODO: add NPS support

# define axes for this device
dev = GCSDevice()
# create a dictionary to hold limit information
limits = {}

# TODO: if device is on (NPS), connect to it

info("Starting display drawer")
# we use Popen to start drawer script in a non-blocking way
draw_proc = Popen(["TCP_draw"])

info("Beginning loop.")
main()