#!/usr/bin/env kpython3

#inherent python libraries
from subprocess import Popen
from argparse import ArgumentParser, SUPPRESS
from configparser import ConfigParser
from time import sleep, ctime
import sys, io, os

#installed libraries
import numpy as np

#nfiuserver libraries
from FIU_TTM_cmds import FIU_TTM_cmds
from dev_Exceptions import ScriptOff, StageOff, MissingPreset

if __name__ != "__main__": sys.exit()

"""

executable to control the TTM quickly from the command line

"""

RELDIR = os.environ.get("RELDIR")
if RELDIR[-1] == "/": RELDIR = RELDIR[:-1]

config=ConfigParser()
config.read(RELDIR+"/data/FIU_TTM.ini")

_debugFormat="%(filename)s.%(funcName)s@%(asctime)s - %(levelname)s: %(message)s"
_logDefault=config.get("Communication", "debug_log")

parser=ArgumentParser(conflict_handler="resolve")

#for help message, see bottom

#add subparser to handle device commands.
dev=parser.add_subparsers()
	
#Return the current position of the TTM.
pos=dev.add_parser("status")
pos.add_argument("-status")
pos.add_argument("-push", action="store_true")

#Enables the TTM control script.
enable=dev.add_parser("enable")
enable.add_argument("-enable")
enable.add_argument("-m", action="store_true")
enable.add_argument("-d", "--debug", default=-1, nargs="?")
enable.add_argument("-d!", "--deepDebug", default=-1, nargs="?")

#Disables the TTM control script.
disable=dev.add_parser("disable")
disable.add_argument("-disable")

#Moves TTM to the given position.
moveAbs=dev.add_parser("goto")
moveAbs.add_argument("-goto")
moveAbs.add_argument("target", nargs="?", default=None)
moveAbs.add_argument("y", nargs="?", default=None)
moveAbs.add_argument("-move")

#Displays whether axes are in open loop
qol=dev.add_parser("ol?")
qol.add_argument("-qol")

#Opens the loop
open_=dev.add_parser("open")
open_.add_argument("-open")

#Closes the loop
close_=dev.add_parser("close")
close_.add_argument("-close")

#Turns the TTM on
on=dev.add_parser("on")
on.add_argument("-on")

#Turns the TTM off
off=dev.add_parser("off")
off.add_argument("-off")

#override -h flag to show the "usage" window
parser.add_argument("-h", action="store_true")
	
args=parser.parse_args()

#start control script if enable tag was used
if "enable" in args:
    #vertical pipe separates tmux command from python command
    command=config.get("Environment", "start_command").split("|")
    if args.m:
        command[-1] += (" -m")
    if args.debug != -1:
        command[-1] += (" -d")
        if args.debug is not None:
            command += args.debug

    for cmd in command:
        Popen(cmd.split(" "))
    sys.exit()

if "disable" in args:
    command=config.get("Environment", "end_command").split(" ")
    Popen(command)
    sys.exit()

dev = FIU_TTM_cmds()

# get status
if "status" in args: 
    try: 
        pos, time = dev.get_pos(time = True, update = args.push)
        print("Position: {}. Data was updated {}.".format(list(pos), ctime(time)))
    except ScriptOff as e:
        print("Issue getting status. Try 'FIU_TTM enable'")

    sys.exit()

if "on" in args:
    try: dev.on()
    except ScriptOff as e:
        print("Control script off. Try 'FIU_TTM enable' first.")

    sys.exit()

if "off" in args:
    try: dev.off()
    except ScriptOff as e:
        print("Control script off. Try 'FIU_TTM enable' first.")
    
    sys.exit()

if "qol" in args:
    try: 
        if dev.is_loop_closed():
            print("Loop closed.")
        else: print("Loop open.")
    except ScriptOff as e:
        print("Control script off. Try 'FIU_TTM enable' first.")
    except StageOff as e:
        print("Device off. Try 'FIU_TTM on' first")
    
    sys.exit()
         
if "open" in args:
    try: dev.open_loop()
    except ScriptOff as e:
        print("Control script off. Try 'FIU_TTM enable' first.")
    except StageOff as e:
        print("Device off. Try 'FIU_TTM on' first")
    sys.exit()
        
if "close" in args:
    try: dev.close_loop()
    except ScriptOff as e:
        print("Control script off. Try 'FIU_TTM enable' first.")
    except StageOff as e:
        print("Device off. Try 'FIU_TTM on' first")
    sys.exit()
        
if "goto" in args and not args.target is None:
    # if only first argument was provided, it should be a preset
    if args.y is None:
        try: 
            dev.set_pos(args.target)
            sys.exit()
        except MissingPreset as e:
            print("Invalid preset '{}'. See below.".format(args.target))
        except ScriptOff as e:
            print("Control script off. Try 'FIU_TTM enable' first.")
            sys.exit()
        except StageOff as e:
            print("Device is off. Try 'FIU_TTM on' first.")
            sys.exit()
    else:
        try:
            args.target = float(args.target)
            args.y = float(args.y)
            dev.set_pos([args.target, args.y])
            sys.exit()
        except ValueError as e:
            print("Invalid arguments. See below.")
        except ScriptOff as e:
            print("Control script off. Try 'FIU_TTM enable' first.")
            sys.exit()
        except StageOff as e:
            print("Device is off. Try 'FIU_TTM on' first.")
            sys.exit()

#before finding limits, we display usage (note the only tag left to parse is
#  'center' which comes with 'move', so it's ok to display this first.
if not "move" in args:
    cmds=["goto", "status"]
    print("""
--------------------------------------------
Movement:
      - - - - - - - - - - - - - - - -      
FIU_TTM <CMD> [<POS> <POS>] [PRESET]
--------------------------------------------
CMD:
{b:3}{:<8}move to an absoluate position

Type FIU_TTM <CMD> for examples and limits
--------------------------------------------
Query:
      - - - - - - - - - - - - - - - -      
FIU_TTM <CMD> [-push]
--------------------------------------------
CMD:
{b:3}{:<8}get position and time from
{b:11}shared memory
[-push]:
{b:3}optional tag for query commands that 
{b:11}updates shared memory before
{b:11}returning.
EXAMPLES:
{b:3}FIU_TTM status
{b:3}FIU_TTM status -push
--------------------------------------------

Type man FIU_TTM for comprehensive command list

""".format(*cmds, b=""))
    sys.exit()
            
min1=config.getfloat("TTM_Limits", "min_1")
max1=config.getfloat("TTM_Limits", "max_1")
min2=config.getfloat("TTM_Limits", "min_2")
max2=config.getfloat("TTM_Limits", "max_2")

lim_msgx="(x: must be between {} and {})".format(min1, max1)
lim_msgy="(y: must be between {} and {})".format(min2, max2)
thirdx=(max1-min1)/3
thirdy=(max2-min2)/3
use1="{:.2f} {:.1f}".format(min1+thirdx, min2+2.5*thirdy)
use2="{:.0f} {:.3f}".format(min1+2*thirdx, min2+.5*thirdy)
if len(dev.presets) != 0:
    use3 = "{}".format(list(dev.presets.keys())[0])
else:
    use3 = "{} {}".format(min1, max2)

pres_msg = ""
for pres in dev.presets:
    pres_msg += "{b:5}{name:<10}: {val}\n".format(b = "", name = pres,
                val = dev.presets[pres])

print("""
--------------------------------------------
Usage: FIU_TTM goto [<POS> <POS>] [PRESET]
--------------------------------------------
POS:
{b:3}the absolute position to move to
{b:5}{lim_msgx}
{b:5}{lim_msgy}
PRESET:
{b:3}one of the following (values shown too)
{presets}
EXAMPLES:
{b:3}FIU_TTM goto {use1}
{b:3}FIU_TTM goto {use2}
{b:3}FIU_TTM goto {use3}
--------------------------------------------

ERROR: invalid ARG. Please see above.
""".format(presets = pres_msg, use1=use1, use2=use2, use3=use3,
    lim_msgx=lim_msgx, lim_msgy=lim_msgy, b=""))
