#!/usr/bin/env kpython3

# inherent python libraries
from argparse import ArgumentParser
from configparser import ConfigParser
from atexit import register, unregister
from signal import signal, SIGHUP, SIGTERM
from subprocess import Popen
import logging, os

# installs
import numpy as np
import posix_ipc

# nfiuserver libraries
from KPIC_shmlib import Shm
from Zaber import Zaber_Device

# Connection information for the Zabers
HOST = "nspecterm"
PORT = 10008

# info is most of what we'll be using for logging, so make a shortcut for it
info = logging.info

# global tag to indicate whether this script should die
alive = True

class AlreadyAlive(Exception):
    """An exception to be thrown if a second control script is started"""
    pass

def update(error:int = 0):
    """Updates the shared memory"""

    b0 = 1

    b1 = 1 << 1 if zabers.con_type is not None else 0

    # if device is connected, get rest of status and position
    if b1:
        resp = zabers.getPos("all")
        # in this case, there was an error
        if type(resp) is int:
            # keep error if one was passed, otherwise store this error
            if error == 0: error = resp
        else:
            # update position
            Pos_D.set_data(np.array([resp["x"],resp["y"],resp["f"]],\
                Pos_D.npdtype))
    
        stat_old = Stat_D.get_data()[0]

        b4 = zabers.isHomed("all")
        if not all([type(val) is bool for val in b4.values()]):
            if error == 0: error = b4
            b4 = stat_old & 1 << 4
        else: b4 = 1 << 4 if all(b4.values()) else 0

        b3 = zabers.isAntiSticktionOn("all")
        if not all([type(val) is bool for val in b3.values()]):
            if error == 0: error = b3
            b3 = stat_old & 1 << 3
        else: b3 = 1 << 3 if all(b3.values()) else 0

        b2 = zabers.isAntiBacklashOn("all")
        if not all([type(val) is bool for val in b2.values()]):
            if error == 0: error = b2
            b2 = stat_old & 1 << 2
        else: b2 = 1 << 2 if all(b2.values()) else 0
    # otherwise everything is 0
    else:
        b2, b3, b4 = 0, 0, 0

    stat = b0 | b1 | b2 | b3 | b4

    # update status if there's a new value
    if stat != Stat_D.get_data()[0]: Stat_D.set_data(np.array([stat], Stat_D.npdtype))

    err_old = Error.get_data()[0]
    # update error if there's a new value
    if error != 0 or error != err_old:
        Error.set_data(np.array([error], Error.npdtype))

def move() -> int:
    """Makes the requested move
    
    Returns:
        int = error code
    """

    if zabers.con_type is None: return -1

    if not all(zabers.isHomed("all").values()): return 3

    req = Pos_P.get_data()
    axes = {0:"x", 1:"y", 2:"f"}
    for idx, target in enumerate(req):
        if not (0 <= target <= limits[axes[idx]][1]): return 20 

    axes = ["x", "y", "f"]
    cmd = {axes[idx]:req[idx] for idx in [0,1,2]}

    resp = zabers.moveAbs(cmd)
    return resp

def doStatus() -> int:
    """Performs any actions reflected by Stat_P shm
    
    Returns:
        int = error code
    """

    req = Stat_P.get_data()[0]
    cur = Stat_D.get_data()[0]
    error = 0

    if not req & 1:
        # end script if requested
        signal_handler(None, None)

    # first check if we need to connect
    req_b1 = bool(req & 1 << 1)

    if req_b1 and zabers.con_type is None:
        connect_device()
    elif req_b1:
        # home or reset device if needed
        cur_b4 = bool(cur & 1 << 4)
        req_b4 = bool(req & 1 << 4)
        if cur_b4 != req_b4:
            if req_b4:
                resp = zabers.home("all")
                if resp != 0: error = resp
            else:
                resp = zabers.reset()

        # turn AS on or off if needed
        cur_b3 = bool(cur & 1 << 3)
        req_b3 = bool(req & 1 << 3)
        if req_b3 != cur_b3:
           resp = zabers.setAntiSticktion({axis:req_b3 for axis in zabers.axes})
           if resp is not None: error = resp 

        # turn AB on or off if needed
        cur_b2 = bool(cur & 1 << 2)
        req_b2 = bool(req & 1 << 2)
        if req_b2 != cur_b2:
            resp = zabers.setAntiBacklash({axis:req_b2 for axis in zabers.axes})
            if resp is not None: error = resp 
    else:
        # disconnect from devices
        zabers.close()

    return error

def loop():
    """Continuously check for shm updates and performs actions accordingly"""

    while alive:
        error = 0

        # if the status has been updated, perform request
        if Stat_P.mtdata["cnt0"] != Stat_P.get_counter():
            resp = doStatus()
            if resp != 0: error = resp
        # if the position has been updated, perform request
        if Pos_P.mtdata["cnt0"] != Pos_P.get_counter():
            resp = move()
            if resp != 0: error = resp

        update(error)

        # wait for a command shared memory to be updated
        ShmP.acquire()

def connect_device():
    """Opens connection to the Zabers"""

    # open connection to the zabers
    zabers.open_telnet(HOST, PORT)

    global limits
    soft = zabers.getMaxMove("all")
    # if there was an error, update and return
    if type(soft) is int: update(soft); return
    # otherwise, check limits
    axis_assignments = {1:"x", 2:"y", 3:"f"}
    for lim in limits:
        soft_max = soft[lim]
        if limits[lim][1] > soft_max:
            info("Changing max limit for axis {} to {}".format(lim, soft_max))
            limits[lim][1] = soft_max 

    # we want to copy P values to D values so update first
    update()

    # set Pos_P to reflect Pos_D
    Stat_P.set_data(Stat_D.get_data())
    Pos_P.set_data(Pos_D.get_data())

def signal_handler(signum, stack):
    """A function to handle when a SIGHUP or SIGTERM is called"""
    global alive
    alive = False
    ShmP.release()

def close():
    """Performs a clean close of the program, releasing resources as necessary"""

    info("Killing draw process.")
    try: draw_proc.terminate()
    except Exception as ouch: info("Exception on close: {}".format(ouch))

    info("Deleting command shared memory files")
    # We want to delete all command shared memories so scripts can't 
    #    accidentally connect
    try:
        for shm in [Stat_P, Pos_P]:
            try: shm.lock.unlink()
            except Exception as ouch: 
                info("Exception on close: {}".format(ouch))
            try: os.remove(shm.fname)
            except Exception as ouch: 
                info("Exception on close: {}".format(ouch))
    except Exception as ouch: info("Exception on close: {}".format(ouch))

    info("Disconnecting from device")
    try: zabers.close()
    except Exception as ouch: info("Exception on close: {}".format(ouch))

    try: update(error = 0)
    except Exception as ouch: info("Exception on close: {}".format(ouch))

    info("Updating state shared memory file.")
    try:
        # set state status based on above change
        stat = Stat_D.get_data()
        stat[0] = stat[0] & ~1
        Stat_D.set_data(stat)
    except Exception as ouch: info("Exception on close: {}".format(ouch))

    info("Killing semaphore listening processes.")
    try:
        for proc in Sem_Listeners:
            try: proc.terminate()
            except Exception as ouch: info("Exception on close: {}".format(ouch))
    except Exception as ouch: info("Exception on close: {}".format(ouch))

    info("Unlinking ShmP service semaphore")
    try: ShmP.unlink()
    except Exception as ouch: info("Exception on close: {}".format(ouch))

    unregister(close)

    info("Closing tmux session.")
    Popen(config.get("Environment", "end_command").split(" "))

# load up resources
RELDIR = os.environ.get("RELDIR")
if RELDIR[-1] == "/": RELDIR = RELDIR[:-1]

config = ConfigParser()
config.read(RELDIR+"/data/Bundle.ini")

log_path = config.get("Communication", "debug_log")
debug_format = "%(filenames.%(funcName)s@%(asctime)s - %(levelname)s: %m(message)s"

limits={}
for axis in ["x", "y", "f"]:
    limits[axis] = [config.getfloat("Limits", "min_{}".format(axis)), \
        config.getfloat("Limits", "max_{}".format(axis))]

parser = ArgumentParser()
# flags to put into debug mode
parser.add_argument("-d", default=-1, nargs="?")
parser.add_argument("-d!", "--dd", default=-1, nargs="?")
parser.add_argument("-draw", action = "store_true")

args = parser.parse_args()

# set up debug mode
if args.dd != -1:
    # if a path was given, save it
    if not args.dd is None: log_path=args.dd
    logging.basicConfig(format=debug_format, datefmt="%H:%M:%S",\
        filename=log_path)
    logging.root.setLevel(logging.DEBUG)
elif args.d != -1:
    if not args.d is None: log_path=args.d
    logging.basicConfig(format=debug_format, datefmt="%H:%M:%S",\
        filename=log_path)
    logging.root.setLevel(logging.INFO)

# make the folder for shared memories if it doesn't already exist
if not os.path.isdir("/tmp/BUNDLE"): os.mkdir("/tmp/BUNDLE")

# create a dictionary to translate strings into numpy data types
type_ = {"int8":np.int8, "int16":np.int16, "int32":np.int32, "int64":np.int64,
    "uint8":np.uint8, "uint16":np.uint16, "uint32":np.uint32,
    "uint64":np.uint64, "intp":np.intp, "uintp":np.uintp, "float16":np.float16,
    "float32":np.float32, "float64":np.float64, "complex64":np.complex64,
    "complex128":np.complex128}

# Connect to shm to check if control script is alive
Stat_D = config.get("Shm_Info", "Stat_D").split(",")
if os.path.isfile(Stat_D[0]):
    Stat_D = Shm(Stat_D[0])
    status = Stat_D.get_data()

    if status[0] & 1:
        info("Active control script exists. Raising exception.")
        msg = "State shared memory status {}".format(status)
        raise AlreadyAlive(msg)
    else:
        status[0] = status[0] | 1
        Stat_D.set_data(status)
else:
    info("No status state shared memory. Creating file.")
    Stat_D = Shm(Stat_D[0], data=np.array([1], dtype=type_[Stat_D[1]]),
                 mmap = (Stat_D[2] == "1"))

Pos_D = config.get("Shm_Info", "Pos_D").split(",")
if os.path.isfile(Pos_D[0]): Pos_D = Shm(Pos_D[0])
else:
    info("No position state shared memory. Creating file.")
    Pos_D = Shm(Pos_D[0], data=np.array([0, 0, 0], dtype=type_[Pos_D[1]]),
                mmap = (Pos_D[2] == "1"))

Error = config.get("Shm_Info", "Error").split(",")
if os.path.isfile(Error[0]): Error = Shm(Error[0])
else:
    info("No state error shared memory. Creating file.")
    Error = Shm(Error[0], data=np.array([0], dtype=type_[Error[1]]),
                mmap = (Error[2] == "1"))

info("No duplicate control script, continuing with initialization.")

#NOTE: we want to register cleanup after Shm_D is initialized so we can edit it
# register handles keyboard interrupts and exceptions
# signal handles tmux kill-ses and os terminate
info("Registering cleanup")
register(close)
signal(SIGHUP, signal_handler)
signal(SIGTERM, signal_handler)

info("Initializing command shared memory from config file.")

# create a subscription semaphore to link all P shms
ShmP = posix_ipc.Semaphore(None, flags = posix_ipc.O_CREX)

# create a list to store processes that are updating semaphores (to be killed
#    at close)
Sem_Listeners = []

Stat_P = config.get("Shm_Info", "Stat_P").split(",") 
Stat_P = Shm(Stat_P[0], data=Stat_D.get_data(), sem=True, mmap = (Stat_P[2] == "1"))
Sem_Listeners.append(Popen(["linksem", Stat_P.sem.name, ShmP.name]))

Pos_P = config.get("Shm_Info", "Pos_P").split(",")
Pos_P = Shm(Pos_P[0], data=Pos_D.get_data(), sem=True, mmap = (Pos_P[2] == "1"))
Sem_Listeners.append(Popen(["linksem", Pos_P.sem.name, ShmP.name]))

info("Command shared memories successfully created.")

# set up Zaber device
zabers = Zaber_Device()

info("Starting display drawer")
display_cmd = ["Bundle_draw"]
if args.draw: display_cmd.append("-draw")
draw_proc = Popen(display_cmd)

info("Updating shared memories")
update(0)

info("Beginning loop")
loop()
