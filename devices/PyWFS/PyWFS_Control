#!/usr/bin/env kpython3

# inherent python libraries
from configparser import ConfigParser
from atexit import register, unregister
from time import sleep
from signal import signal, SIGHUP, SIGTERM
from subprocess import Popen
from argparse import ArgumentParser
import sys, os, logging

# installs
import numpy as np
from posix_ipc import Semaphore, O_CREX, ExistentialError

# nfiuserver libraries
from KPIC_shmlib import Shm
from Conex import Conex_Device
from NPS_cmds import NPS_cmds

"""

THIS IS A CONTROL SCRIPT FOR THE FIBER INJECTION UNIT'S PYRAMID WAVEFRONT SENSOR
AND NOT FOR USE BY USER

See FEU_TTM_cmds or type FEU_TTM in terminal to control the TTM

"""

# This script is not meant to be imported
if __name__ != "__main__":
    print("PyWFS is not meant to be used as an import.")
    sys.exit()

# a flag to decide whether this script should die
alive = True

# a flag to tell the update thread to stop what it's doing
STOP = False
# a variable to store the current update thread
cur_thread = None

# define info from logging
info = logging.info

class NPSError(Exception):
    """An exception to be thrown if there is an error with the NPS"""
    pass

class AlreadyAlive(Exception):
    """An exception to be thrown if control code is initialized twice"""
    pass

def move(target:float) -> int:
    """Performs a requested move

    If target is outside of limits, returns an error message (but does not
    throw any errors)

    Args:
        target = the target position to move to
    Returns:
        int = the error message (check PyWFS.ini for translation)
    """

    # Check whether target is valid before moving
    if req < limits["min_1"] or req > limits["max_1"]:
        info("Movement requested outside of motion range")
        return 1

    # perform movement
    info("Moving to {}.".format(target))
    err = dev.moveAbs(newPOS={1:target}, isBlocking = True)

    # if moveAbs returned a dict, it's an error
    if type(err) is dict: return -1*(ord(err[1])-64)
    else: return 0

def connect_device():
    """Connects to the device"""

    # TODO: do nothing if device is off

    # Do nothing if device is already connected
    if not dev.con_type is None: return

    info("Connecting to Conex controller")
    dev.open_Serial(devnm, baud)

    info("Extracting limits from config file")
    global limits
    limits = {name:config.getfloat("Limits", name) for name in\
        config.options("Limits")}
    info("Config limits: {}".format(limits))

    info("Checking that config limits are within software limits.")
    # get software limits
    softlim = dev.lims
    for axis in axes:
        min_ = "min_{}".format(axis)
        max_ = "max_{}".format(axis)
        if limits[min_] < softlim[axis][0]:
            info("Changing {} limit to {}.".format(min_, softlim[axis][0]))
            limits[min_] = softlim[axis][0]
        if limits[max_] > softlim[axis][1]:
            info("Changing {} limit to {}.".format(max_, softlim[axis][1]))
            limits[max_] = softlim[axis][1]

    info("Getting command shared memory")

    pos = Pos_P.get_data()

    if CAN_MOVE:
        info("Moving to initial positions.")
        # load the starting position values into a dict
        pos = {axis:pos[axis-1] for axis in axes}
        move(pos)
    else:
        info("Cannot move to initial position. Changing command shm.")
        # update Pos_D
        curpos = dev.reqPosAct()
        if type(curpos) is dict: Pos_D.set_data(np.array([curpos[1]],
            Pos_D.npdtype))
        # update Stat_D
        stat = format(Stat_D.get_data()[0], "08b")
        stat = stat[:-2] + ("0" if dev.con_type is None else "1") + stat[:-1]
        if stat[:-2] == "1":
            stat = stat[:-3] + ("1" if dev.isReady() else "0")
        Stat_D.set_data(np.array([int(stat, 2)], Stat_D.npdtype)) 

        Pos_P.set_data(Pos_D.get_data())
        Stat_P.set_data(Stat_D.get_data())

def device_off():
    """A method to be implemented that closes connection and turns off the device"""

    # close connection to device
    dev.close()

    # change device bit to 0
    stat = format(Stat_D.get_data()[0], "08b")
    stat = stat[:-2] + "0" + stat[-1]
    Stat_D.set_data(np.array([int(stat, 2)], Stat_D.npdtype))

def device_on():
    """A method to be implemented that turns on the device and connects to it"""

    # connect to device
    connect_device()

    # Change device bit to 1
    stat = format(Stat_D.get_data()[0], "08b")
    stat = stat[:-2] + "1" + stat[-1]
    Stat_D.set_data(np.array([int(stat, 2)], Stat_D.npdtype))

def listener():
    """A method to continuously check for command Shm updates"""

    # update counters since this is how we check which shm was updated
    Pos_P.get_counter()
    Stat_P.get_counter()

    # keep the listening processes looping while alive is True
    while alive:
        # get metadata counter to see if it's changed
        pos_cnt = Pos_P.mtdata["cnt0"]
        stat_cnt = Stat_P.mtdata["cnt0"]

        # assume no error
        error = 0

        # check status change first
        if Stat_P.get_counter() != stat_cnt:
            info("status updated")
            stat = format(Stat_P.get_data()[0], "08b")
            # if first bit is 0, end script
            if stat[-1]   == "0": break
            # if second bit is 1, turn on
            if stat[-2]   == "1": device_on()
            # if second bit is 0, turn off
            elif stat[-2] == "0": device_off()
            # if third bit is 1, try to home
            if stat[-3]   == "1": 
                if not dev.isReady(): 
                    err = dev.home(isBlocking = True)
                    if err is not None and err != -1:
                        error = -1*(ord(err)-64) 
            # if third bit is 0, try to reset
            elif stat[-3] == "0": 
                if dev.isReady(): 
                    err = dev.reset()
                    if err is not None and err != -1:
                        error = -1*(ord(err)-64)

        # check position change
        if Pos_P.get_counter() != pos_cnt:
            info("position updated")
            error = move(Pos_P.get_data())

        # update current position
        curpos = dev.reqPosAct()
        if type(curpos) is dict: Pos_D.set_data(np.array([curpos[1]],
            Stat_D.npdtype))
        # update current state
        stat = format(Stat_D.get_data()[0], "08b")
        stat = stat[:-2] + ("0" if dev.con_type is None else "1") + stat[-1]
        if stat[:-2] == "1":
            stat = stat[:-3] + ("1" if dev.isReady() else "0")
        Stat_D.set_data(np.array([int(stat, 2)], Stat_D.npdtype)) 

        # wait for shared memory to be updated
        ShmP.acquire()

        info("Command shared memory updated")

def close():
    """A method to perform a clean close of this control script
    
    Closes all communication with the device, deletes command shared memory files,
    and closes tmux session
    """

    # stop the drawer
    info("Killing draw process")
    try: draw_proc.terminate()
    except Exception as ouch: info("Exception on close: {}".format(ouch))

    # delete command shared memory files
    info("Deleting command shared memory files.")
    try:
        for shm in [Stat_P, Pos_P]:
            try: os.remove(shm.fname)
            except Exception as ouch: info("Exception on close: {}".format(ouch))
    except Exception as ouch: info("Exception on close: {}".format(ouch))

    # TODO: turn off device if it is on
    try: turn_off()
    except Exception as ouch: info("Exception on close: {}".format(ouch))

    # Update state shared memory file
    try:
        stat = format(Stat_D.get_data()[0], "08b")
        stat = stat[:-1] + "0"
        Stat_D.set_data(np.array([int(stat, 2)], Stat_D.npdtype))
    except Exception as ouch: info("Exception on close: {}".format(ouch))

    # Kill semaphore listeners
    info("Killing semaphore listeners")
    try:
        for proc in Sem_Listeners:
            try: proc.terminate()
            except Exception as ouch: info("Exception on close: {}".format(ouch))
    except Exception as ouch: info("Exception on close: {}".format(ouch))

    # Unlink (delete) the semaphore we were using to listen for updates
    info("Unlinking ShmP")
    try: ShmP.unlink()
    except Exception as ouch: info("Exception on close: {}".format(ouch))

    # unregister this method incase it's not being run in a tmux session
    info("Unregistering cleanup method")
    try: unregister(close)
    except Exception as ouch: info("Exception on close: {}".format(ouch))

    # Close tmux session
    info("Closing tmux session")
    os.system(config.get("Environment", "end_command"))

def signal_handler(signum, stack):
    """A method to close gracefully when a signal is received"""

    # connect to global variable to change it
    global alive
    alive = False

    # try to release semaphore so that listener loop iterates
    try: ShmP.release()
    except: pass


RELDIR = os.environ.get("RELDIR")
if RELDIR[-1] == "/": RELDIR = RELDIR[:-1]

# read config file
config = ConfigParser()
config.read(RELDIR+"/data/PyWFS.ini")

log_path = config.get("Communication", "debug_log")
debug_format = "%(filename)s.%(funcName)s@%(asctime)s = %(levelname)s: %(messages)s"

parser = ArgumentParser()
# boolean flag for CAN_MOVE
parser.add_argument("-m", action = "store_true")
# flags to start in debug mode
parser.add_argument("-d", default = -1, nargs = "?")
parser.add_argument("-d!", "--dd", default = -1, nargs = "?")

args = parser.parse_args()

# decides whether this device can move on startup
CAN_MOVE = args.m 

if args.dd != -1:
    # if a path was specified, use that
    if not args.dd is None: log_path = args.dd
    logging.basicConfig(format = debug_format, datefmt = "%H:%M:%S",\
        filename = log_path)
    logging.root.setLevel(logging.DEBUG)
elif args.d != -1:
    # if a path was specified, use that
    if not args.d is None: log_path = args.d
    logging.basicConfig(format = debug_format, datefmt = "%H:%M:%S",\
        filename = log_path)
    logging.root.setLevel(logging.INFO)

# make the folder for shared memories if it doesn't already exist
if not os.path.isdir("/tmp/PyWFS"): os.mkdir("/tmp/PyWFS")

# create a dictionary to translate strings into numpy data types
types_ = {"int8":np.int8, "int16":np.int16, "int32":np.int32, "int64":np.int64,
    "uint8":np.uint8, "uint16":np.uint16, "uint32":np.uint32, "uint64":np.uint64,
    "float16":np.float16, "float32":np.float32, "float64":np.float64,
    "complex64":np.complex64, "complex128":np.complex128}

# for now we just want to connect to shm to see if there's already a script
Stat_D = config.get("Shm Info", "Stat_D").split(",")
if os.path.isfile(Stat_D[0]):
    Stat_D = Shm(Stat_D[0])
    status = format(Stat_D.get_data()[0], "08b")

    if status[-1] == "1":
        info("Active control script exists. Raising exception.")
        raise AlreadAlive("State status shared memory script bit is 1.")
    else:
        status = status[:-1] + "1"
        Stat_D.set_data(np.array([int(status, 2)], Stat_D.npdtype))
else:
    info("No state shared memory file. Creating file.")
    Stat_D = Shm(Stat_D[0], data = np.array([1], dtype = types_[Stat_D[1]]),
        mmap = (Stat_D[2] == "1"))

Pos_D = config.get("Shm Info", "Pos_D").split(",")
if os.path.isfile(Pos_D[0]): Pos_D = Shm(Pos_D[0])
else:
    info("No state shared memory file. Creating file.")
    Pos_D = Shm(Pos_D[0], data = np.array([-5000], dtype = types_[Pos_D[1]]),
        mmap = (Pos_D[2] == "1"))

Error = config.get("Shm Info", "Error").split(",")
if os.path.isfile(Error[0]): Error = Shm(Error[0])
else:
    info("No state shared memory file. Creating file.")
    Error = Shm(Error[0], data = np.array([0], dtype = types_[Error[1]]),
        mmap = (Error[2] == "1"))

info("No duplicate control script, continuing with intialization.")

# NOTE: we want to register cleanup after Shm_D is initialized so we can
#   edit it in the cleanup method

# register handles keyboard interrupts and exceptions
# signal handles tmux kill-ses and terminates
info("Registering cleanup.")
register(close)
signal(SIGHUP, signal_handler)
signal(SIGTERM, signal_handler)

info("Initializing command shared memory from config file.")

# create a subscription semaphore to link all P shms
ShmP = Semaphore(None, flags = O_CREX)

# create a list to store processes that are updating semaphores
#   (to be killed at close)
Sem_Listeners = []

Stat_P = config.get("Shm Info", "Stat_P").split(",")
Stat_P = Shm(Stat_P[0], data = np.array([1], dtype = types_[Stat_P[1]]),
    sem = True, mmap = (Stat_P[2] == "1"))
Sem_Listeners.append(Popen(["linksem", Stat_P.sem.name, ShmP.name]))

Pos_P = config.get("Shm Info", "Pos_P").split(",")
Pos_P = Shm(Pos_P[0], data = np.array([-5000.], dtype = types_[Pos_P[1]]),
    sem = True, mmap = (Pos_P[2] == "1"))
Sem_Listeners.append(Popen(["linksem", Pos_P.sem.name, ShmP.name]))

def Punlink():
    """Tries to unlink the lock semaphores on the P shms"""

    try: Stat_P.lock.unlink()
    except (AttributeError, ExistentialError) as ouch:
        info("Exception on close: {}".format(ouch))

    try: Pos_P.lock.unlink()
    except (AttributeError, ExistentialError) as ouch:
        info("Exception on close: {}".format(ouch))

    unregister(Punlink)

# We want to register lock unlinking after making shms so that Punlink
#   is called before the shm is cleaned up
register(Punlink)

info("Command shared memories successfully created.")

# TODO: add in NPS, turn_on, turn_off, q_pow

# set up device
dev = Conex_Device()
# save devnm and port
devnm = config.get("Communication", "devnm")
baud = config.get("Communication", "baud")

# define this stage's axes
axes = [1]

# TODO: once NPS support is added, if the device is already on, connect to it

info("Starting display drawer")
# we use Popen to start the drawing script separately to prevent blocking
display_cmd = "PyWFS_draw"
draw_proc = Popen(display_cmd.split(" "))

error = 0

info("Beginning loop.")
listener()