#
# KPIC FEU Conex Tip-Tilt mirror initialization file
#
#
# WARNING: the lack of spaces between commas is a functional choice. If spaces
# are added, scripts may break (as no strip is applied to this data)

[Communication]
# Default location to store TTM debug file
debug_log:  /nfiudata/LOGS/FEU_TTM.log

[Environment]
# Command to start control script
# to use with Popen: split by "|" and then split beginning by " "
start_command: tmux new -d -s FEU_TTM|FEU_TTM_Control
# Command to end control script
end_command:   tmux kill-ses -t FEU_TTM

[Limits]
# Axis 1 lower limit
min_1: 0.
# Axis 1 higher limit
max_1: 10000.
# Axis 2 lower limit
min_2: 0.
# Axis 2 higher limit
max_2: 10000.

[Shm_Info]
# for each of the following, the first element is the path to the shared 
#   memory, the second is the (numpy) data type in the shared memory,
#   the third is whether to mmap this shm
#
# The directory path below is made in FEU_TTM_Control, so change that file if
#   changing location of shms.

# NOTE: float16 might work, need to check precision of encoder
# Shared memory to store the current positiom
Pos_D:  /tmp/FEU_TTM/POSD.shm,float32,1
# NOTE: float16 might work, need to check precision of encoder
# Shared memory to store the target position
Pos_P:  /tmp/FEU_TTM/POSP.shm,float32,1
# Shared memory to store the current status
Stat_D: /tmp/FEU_TTM/STATUSD.shm,int8,0
# Shared memory to store the target status
Stat_P: /tmp/FEU_TTM/STATUSP.shm,int8,0
# Shared memory to store any error that arises
Error:  /tmp/FEU_TTM/ERROR.shm,int8,0

# To get the size of a shared memory, look here and split by ","
[Shm_Init]
# pos, pos
# Nonsense values that will be overwritten
Pos_D:  -5000.,-5000.
# pos, pos
# The center of the TTM's range
Pos_P:  5000.,5000.
# 2 = moving // 1 = all (stage & script) on // 0 = stage off
#    -1 = script dead // -2 = all off 
Stat_D: 2
# 1 = device on // 0 = device off
Stat_P: 1
# 0 = None // 1 = MovementRange // 3 = StageOff //
#    negative number: numerical representation of Conex error. To translate:
#    convert (-1*error)+64 to ascii [e.g. chr(-1*(error+64)) in Python3] 
#    and then check device user manual.    
Error:  0
