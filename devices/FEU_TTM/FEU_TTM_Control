#!/usr/bin/env kpython3

#inherent python libraries
from configparser import ConfigParser
from atexit import register, unregister
from time import sleep
from signal import signal, SIGHUP, SIGTERM
from subprocess import Popen
from argparse import ArgumentParser
import sys, os, threading, logging

#installs
import numpy as np
import posix_ipc

#nfiuserver libraries
from KPIC_shmlib import Shm
from Conex import Conex_Device
from NPS_cmds import NPS_cmds

"""

THIS IS A CONTROL SCRIPT FOR THE FIBER EXTRACTION UNIT's TIP TILT MIRROR
AND NOT FOR USE BY USER

See FEU_TTM_cmds or type FEU_TTM in terminal to control the TTM 

"""

#This script is not an import
if __name__ != "__main__": 
    print("FEU_TTM_Control is not meant to be used as an import.")
    sys.exit()

# a flag to tell the whole script to end if a signal is passed
alive = True

#a flag to tell the update thread to stop what it's doing
STOP=False

cur_thread = None

info=logging.info

class NPSError(Exception):
    """An exception to be thrown if there is an error with the NPS"""
    pass

class AlreadyAlive(Exception):
    """An exception to be thrown if control code is initialized twice"""
    pass

def update(error:int=0):
    """A method to be used in a thread that continuously checks the
    state of the TTM and updates the shm if necessary.

    Inputs:
        error = the error message to put into the shm
    """

    #continuously check device info
    while not STOP:
        with dev_lock: qMOV=dev.isMoving()
        # a value of -1 means that the serial coms aren't open
        if qMOV == -1:
            if Stat_D.get_data()[0] != 0:
                Stat_D.set_data(np.array([0], np.int8))
                Error.set_data(np.array([error], np.int8))
            break
        #if we are moving or just finished moving, update shm
        elif qMOV or Stat_D.get_data()[0] == 2:
            with dev_lock: curpos=dev.reqPosAct()
            # if we got a list, it means there was no error
            if type(curpos) is dict:
                Pos_D.set_data(np.array([curpos[1], curpos[2]], np.float32))
            # here we have an error
            elif type(curpos) is tuple and error == 0:
                # if we haven't had an error yet, take one from device errors
                error = list(curpos[1].values())[0]
                # convert error to an int
                error = -1*(ord(error)-64)
            
            stat = 2 if qMOV else 1
            Stat_D.set_data(np.array([stat], np.int8))

            Error.set_data(np.array([error], np.int8))
        #otherwise, make sure status is set correctly
        else:
            if Stat_D.get_data()[0] != 1: 
                Stat_D.set_data(np.array([1], np.int8))
            with dev_lock: curpos=dev.reqPosAct()
            if type(curpos) is dict:
                Pos_D.set_data(np.array([curpos[1], curpos[2]], np.float32))
            elif type(curpos) is tuple and error == 0:
                error = list(curpos[1].values())[0]
                error = -1*(ord(error)-64)    
            if error != 0 or Error.get_data()[0] != error:
                Error.set_data(np.array([error], np.int8))
            break

def move(target:list) -> int:
    """Tries to move TTM to target position.

    If target is outside of limits, returns an error message (but does not
    throw any errors).

    Inputs:
        target = a list with two floats. Index n is axis n+1.
    Outputs:
        int = the error message (check FEU_TTM.ini for translation)
    """

    #check whether target is valid before moving
    for idx in axes:
        req = target[int(idx)-1]
        if req < limits["min_{}".format(idx)] or\
           req > limits["max_{}".format(idx)]:
            info("Movement requested outside of motion range")
            return 1

    #perform movement
    #TODO: don't send move if TTM is already in position (have to check
        #precision of encoder)
    req = {1:target[0], 2:target[1]}
    info("Moving axis {} to {}.".format(idx, req))
    with dev_lock: err = dev.moveAbs(newPOS=req)
    
    # if moveAbs returns a dict, it's populated with errors.
    if type(err) is dict: return -1*(ord(list(err.values())[0])-64)
    else: return 0

def connect_device():
    """Connects the TTM. If device is already connected, does nothing.
        
    Reloads limits from config file and, if CAN_MOVE==True, moves.
    If the limits in the config file are outside the software limits,
        the config file will be rewrwitten
    """
    
    #Do nothing if device is off or already connected
    """
    with dev_lock:
        if not q_pow() or not dev.con_type is None: return 
    """

    if not dev.con_type is None: return

    info("Connecting TTM Conex controller.")
    with dev_lock: dev.open_Telnet(addr, port)

    info("Extracting limits from config file.")
    global limits
    limits = {name:config.getfloat("Limits", name) for name in \
        config.options("Limits")}
    info("Config limits: {}".format(limits))

    info("Checking that config limits are within software limits.")
    #get software limits
    softlim = dev.lims
    for axis in axes:
        min_="min_{}".format(axis)
        max_="max_{}".format(axis)
        if limits[min_] < softlim[axis][0]:
            info("Changing {} limit to {}.".format(min_, softlim[axis][0]))
            limits[min_] = softlim[axis][0]
        if limits[max_] > softlim[axis][1]:
            info("Changing {} limit to {}.".format(max_, softlim[axis][1]))
            limits[max_] = softlim[axis][1]

    info("Getting command shared memory")

    pos = Pos_P.get_data()

    if CAN_MOVE:
        info("Moving to initial positions.")
        #load the starting position values into a dict
        pos_i = {axis:pos[int(axis)-1] for axis in axes}
        move(pos_i)
    else:
        info("Cannot move to initial positions. Changing command shared " +\
         "memory values.")
        with dev_lock: cur_pos = dev.reqPosAct()
        #get values for each axis
        if type(cur_pos) is dict:
            for axis in axes: pos[int(axis)-1] = cur_pos[axis]
            Pos_P.set_data(pos)
        else:
            error = list(curpos[1].values())[0]
            error = -1*(ord(error)-64)
            Error.set_data(np.array([error], np.int8))

def device_off():
    """Turns off the TTM using the NPS"""

    info("Checking if TTM is connected.")
    if dev is None or dev.con_type is None:
        return

    #update position
    #if there is an existing update thread, tell it to stop
    global cur_thread
    if cur_thread is not None and cur_thread.is_alive():
        cur_thread.join()
    else: update() #update shm

    with dev_lock:
        info("Closing connection to TTM.")
        dev.close()

    info("Sending off command to NPS")
    turn_off()

    info("Waiting for TTM to turn off.")
    #while q_pow(): sleep(.5)
        
    update()

def device_on():
    """Waits for NPS to turn on device and then connects"""

    # if the device is already on, do nothing
    #if q_pow(): return

    info("Sending on command to NPS")
    turn_on()

    info("Waiting for NPS to turn on device.")
    #while not q_pow(): sleep(.1)

    info("Opening connection to TTM.")
    connect_device()

def listener():
    """A method that performs commands from the command shared memory when 
    updated, and spawns a thread that updates the position of the TTM in shm.
    """

    Pos_P.get_counter()
    Stat_P.get_counter()

    #we put the listening process in an infinite loop
    while alive:
        info("command shared memory updated")
        #here we look at metadata instead of reading new metadata to ensure
        #  we're getting the count of the last time we updated 
        pos_cnt = Pos_P.mtdata["cnt0"]
        stat_cnt = Stat_P.mtdata["cnt0"]
        
        error=0
        
        #check status change first
        if Stat_P.get_counter() != stat_cnt:
            info("status updated")
            req_stat = Stat_P.get_data()[0]
            if req_stat == 1:
                info("Turning on device")
                device_on()
            elif req_stat == 0:
                info("Turning off device")
                device_off()
    
        #check position change last
        if Pos_P.get_counter() != pos_cnt:
            info("Position updated")
            error = move(Pos_P.get_data())
        
        #if there is an existing update thread, tell it to stop
        global cur_thread
        if cur_thread is not None and cur_thread.is_alive():
            global STOP
            STOP = True
            cur_thread.join()
            STOP = False
        #start a new update thread with the new error value
        cur_thread = threading.Thread(target=update, args=(error,), daemon=True)
        cur_thread.start()

        ShmP.acquire()

def close():
    """A cleanup method.

    Closes all communication with the TTM, deletes command shared memory,
    and closes tmux session.
    """

    try:
        global STOP
        STOP = True
        if cur_thread is not None and cur_thread.is_alive():
            cur_thread.join()
    except Exception as ouch: info("Exception on close: {}".format(ouch))

    info("Killing draw process.")
    try: draw_proc.terminate()
    except Exception as ouch: info("Exception on close: {}".format(ouch))

    info("Deleting command shared memory file.")
    #We want to delete all command shared memories  so scripts can't 
    #mistakenly think the control script is alive.
    try:
        for shm in [Stat_P, Pos_P]:
            try: os.remove(shm.fname)
            except Exception as ouch: info("Exception on close: {}".format(ouch))
    except Exception as ouch: info("Exception on close: {}".format(ouch))

    info("Checking if TTM is connected.")
    try:    
        if not dev.con_type is None:
            info("Turning off TTM.")
            device_off()
    except Exception as ouch: info("Exception on close: {}".format(ouch))
    
    info("Updating state shared memory file.")
    try:
        #define how the status should change
        change = {2:-1, 1:-1, 0:-2, -1:-1, -2:-2}
        #set state status based on above change
        Stat_D.set_data(np.array([change[Stat_D.get_data()[0]]], np.int8))
    except Exception as ouch: info("Exception on close: {}".format(ouch))

    #killing semaphore listening processes.
    try:
        for proc in Sem_Listeners:
            try: proc.terminate()
            except Exception as ouch: info("Exception on close: {}".format(ouch))
    except Exception as ouch: info("Exception on close: {}".format(ouch))
    
    try: ShmP.unlink()
    except Exception as ouch: info("Exception on close: {}".format(ouch))
        
    info("Closing tmux session.")
    unregister(close)
    os.system(config.get("Environment", "end_command"))

def signal_handler(signum, stack):
    global alive
    alive = False
    try: ShmP.release()
    except: pass

RELDIR = os.environ.get("RELDIR")
if RELDIR[-1] == "/": RELDIR = RELDIR[:-1]

#read TTM config file
config = ConfigParser()
config.read(RELDIR+"/data/FEU_TTM.ini")

log_path=config.get("Communication", "debug_log")
debug_format = "%(filename)s.%(funcName)s@%(asctime)s - %(levelname)s: %(message)s"

parser = ArgumentParser()
#boolean flag for CAN_MOVE
parser.add_argument("-m", action="store_true")
#flags to put into debug move
parser.add_argument("-d", default=-1, nargs="?")
parser.add_argument("-d!", "--dd", default=-1, nargs="?")

args = parser.parse_args()

CAN_MOVE = args.m #whether this device can move on startup

if args.dd != -1:
    if not args.dd is None: log_path=args.dd
    logging.basicConfig(format=debug_format, datefmt="%H:%M:%S",\
        filename=log_path)
    logging.root.setLevel(logging.DEBUG)
elif args.d != -1:
    if not args.d is None: log_path=args.d
    logging.basicConfig(format=debug_format, datefmt="%H:%M:%S", \
        filename=log_path)
    logging.root.setLevel(logging.INFO)

#make the folder for shared memories if it doesn't already exist
if not os.path.isdir("/tmp/FEU_TTM"): os.mkdir("/tmp/FEU_TTM")

#create a dictionary to translate strings into numpy data types
type_ = {"int8":np.int8, "int16":np.int16, "int32":np.int32, "int64":np.int64,
    "uint8":np.uint8, "uint16":np.uint16, "uint32":np.uint32,
    "uint64":np.uint64, "float16":np.float16, "float32":np.float32,
    "float64":np.float64, "complex64":np.complex64, "complex128":np.complex128}

#for now we just want to connect to shm to see if there's already a script
Stat_D = config.get("Shm_Info", "Stat_D").split(",")
if os.path.isfile(Stat_D[0]): 
    Stat_D = Shm(Stat_D[0])
    status=Stat_D.get_data()[0]

    if status in [2, 1, 0]:
        info("Active control script exists. Raising exception.")
        msg="State shared memory status {}.".format(status)
        raise AlreadyAlive(msg)
else:
    info("No state shared memory file. Creating file.")
    Stat_D = config.get("Shm_Info", "Stat_D").split(",") +\
        config.get("Shm_Init", "Stat_D").split(",")
    Stat_D = Shm(Stat_D[0], data=np.array([Stat_D[3:]], 
                 dtype=type_[Stat_D[1]]), mmap=(Stat_D[2] == "1"))


Pos_D = config.get("Shm_Info", "Pos_D").split(",")
if os.path.isfile(Pos_D[0]): Pos_D = Shm(Pos_D[0])
else:
    info("No state shared memory file. Creating file.")
    Pos_D = config.get("Shm_Info", "Pos_D").split(",") +\
        config.get("Shm_Init", "Pos_D").split(",")
    Pos_D = Shm(Pos_D[0], data=np.array([Pos_D[3:]], dtype=type_[Pos_D[1]]),\
                mmap=(Pos_D[2] == "1"))

Error = config.get("Shm_Info", "Error").split(",")
if os.path.isfile(Error[0]): Error = Shm(Error[0])
else:
    info("No state shared memory file. Creating file.")
    Error = config.get("Shm_Info", "Error").split(",") +\
        config.get("Shm_Init", "Error").split(",")
    Error = Shm(Error[0], data=np.array([Error[3:]], dtype=type_[Error[1]]),\
                mmap=(Error[2] == "1"))

info("No duplicate control script, continuing with initialization.")

#NOTE: we want to register cleanup after Shm_D is initalized so we can edit it
#register handles keyboard interrupts and exceptions
#signal handles tmux kill-ses, and terminate
info("Registering cleanup.")
register(close)
signal(SIGHUP, signal_handler)
signal(SIGTERM, signal_handler)

info("Initializing command shared memory from config file.")

#create a subscription semaphore to link all P shms
ShmP = posix_ipc.Semaphore(None, flags = posix_ipc.O_CREX)

#create a list to store processes that are updating semaphores (to be killed 
#   at close)
Sem_Listeners = []

Stat_P = config.get("Shm_Info", "Stat_P").split(",") +\
    config.get("Shm_Init", "Stat_P").split(",")
Stat_P = Shm(Stat_P[0], data=np.array([Stat_P[3:]], dtype=type_[Stat_P[1]]),\
     sem=True, mmap=(Stat_P[2] == "1"))
Sem_Listeners.append(Popen(["linksem", Stat_P.sem.name, ShmP.name]))

Pos_P = config.get("Shm_Info", "Pos_P").split(",") +\
    config.get("Shm_Init", "Pos_P").split(",")
Pos_P = Shm(Pos_P[0], data=np.array([Pos_P[3:]], dtype=type_[Pos_P[1]]),\
    sem=True, mmap=(Pos_P[2] == "1"))
Sem_Listeners.append(Popen(["linksem", Pos_P.sem.name, ShmP.name]))

def Punlink():
    """Tries to unlink the lock semaphores on the P shms"""

    try: 
        Stat_P.lock.unlink()
    except (AttributeError, posix_ipc.ExistentialError) as ouch:
        info("Exception on close: {}".format(ouch))

    try: 
        Pos_P.lock.unlink()
    except (AttributeError, posix_ipc.ExistentialError) as ouch:
        info("Exception on close: {}".format(ouch))

    unregister(Punlink)

#we want to register P shm unlink before creating shared memory, otherwise
#  the shm will be cleaned up and we lose access to the lock
register(Punlink)

info("Command shared memories successfully created.")

# The FEU TTM is not currently connected to the NPS
"""
info("Initializing NPS")
NPS=NPS_cmds()
info("Finding TTM port")
NPS.TTM_port = None
for port in NPS.devices:
    if NPS.devices[port] == "FEU TTM":
        NPS.TTM_port = port
        break
if NPS.TTM_port is None:
    info("Cannot find NPS port")
    raise NPSError("Cannot find NPS port")

#convenience methods to deal with the NPS
turn_on = lambda: NPS.turnOn(NPS.TTM_port)
turn_off = lambda: NPS.turnOff(NPS.TTM_port)
q_pow = lambda: NPS.getStatusAll()[NPS.TTM_port]
"""

turn_on = lambda: 0
turn_off = lambda: 0

#set up device.
dev=Conex_Device()
# save address and port to open later
addr = config.get("Communication", "address")
port = config.get("Communication", "address")

axes=[1, 2]
#since we will have multiple threads accessing the device, we need to 
#  avoid interruption during communication
dev_lock = threading.Lock()

#if the device is already on, connect to it
#if q_pow(): connect_device()
    
info("Starting display drawer")        
#we use popen to start the drawing script separately to prevent blocking
display_cmd = "FEU_TTM_draw"
draw_proc=Popen(display_cmd.split(" "))

error = 0

info("Beginning update thread.")
cur_thread = threading.Thread(target=update, daemon=True)
cur_thread.start()
info("Beginning loop.")
listener()
