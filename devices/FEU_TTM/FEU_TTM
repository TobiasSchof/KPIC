#!/usr/bin/env kpython3

# python standard library
from argparse import ArgumentParer, RawDescriptionHelpFormatter
from time import sleep, localtime
import sys

# nfiuserver libraries
from FEU_TTM_cmds import FEU_TTM_cmds
from dev_Exceptions import *

# instantiatee FEU TTM cmds to get presets
dev = FEU_TTM_cmds()

# format help message for no command/invalid command
main_help = """usage:
{b:2}FEU_TTM [CMD] [-h]
    
CMD:
{b:2}goto       - moves device
{b:2}status     - returns last recorded position
{b:2}connect    - connects to device
{b:2}disconnect - disconnects from device
{b:2}enable     - turns on control script
-h:
{b:2}add "-h" after a command for more info""".format(b = "")

# change ArgumentParser so it prints help menu if no valid
#   option is used
class HelpArgumentParser(ArgumentParser):
    def error(self, message):
        if message.startswith("the following arguments are required:"):
            self.print_help()
        else:
            print(main_help)
        sys.exit()

# create argument ArgumentParser
parser = HelpArgumentParser(add_help = False)

# add subparser so we can add tags to our commandds
#    NOTE: dest allows us to check which subparser was called
sub = parser.add_subparser(dest = "command")

# create subparser to handle enable command
enable = sub.add_parser("enable")
enable.add_argument("-d", dest = "log", metavar = "PATH", nargs="?", 
    default = -1, help = "starts control script in logging mode. \
    'PATH' can be specified to change log location")
# add -d! flag
enable.add_argument("-d!", dest = "debug", metavar = "PATH", nargs="?", 
    default = -1, help = "starts control script in debug mode. \
    'PATH' can be specified to change log location")
# add -draw flag
enable.add_argument("-draw", action = "store_true",
    help = "script will draw values in tmux session")

# create subparsers to handle connect/disconnect
connect = sub.add_parser("connect")
disconnect = sub.add_parser("disconnect")

# create subparser to handle status command
status = sub.add_parser("status")
status.add_argument("-push", action = "store_true", help = "requests position update")

# create subparser to handle goto command
# format presets and examples for goto help message
addend = ""
if len(dev.presets) > 0:
    addend += "presets:"
    for preset in dev.presets:
        addend += "\n{b:2}{name:<10}{val}".format(b = "", 
            name = preset + ":", val = dev.presets[preset])
    addend += "\n"

addend += """
examples:
{b:2}FEU_TTM goto 0 0
""".format(b = "")

if len(dev.presets) > 0:
    addend += "{b:2}FEU_TTM goto {pre}".format(b = "",
        pre=list(dev.presets.keys())[0]) 

goto = sub.add_parser("goto", epilog = addend,
    formatter_class = RawDescriptionHelpFormatter)
goto.add_argument("target", nargs="*", 
    help = "position to move to (in mm or a preset)")

# parse arguments and load them into args
#   NOTE: because we used HelpArgumentParser, if an error is encountered,
#         the help message will display and program will exit
args = parser.parse_args()

# if no arguments were specified (or if -h is used, since we disabled help), print help
if args.command is None:
    print(main_help); sys.exit()

# first check for enable command
if args.command == "enable":
    if dev.is_Active(): 
        print("Control script is alread active.")
        sys.exit()
    # create append flags if any optional arguments were provided
    append = ""
    if args.debug != -1:
        append += " -d!"
        if args.debug is not None:
            append += " {}".format(args.debug)
    elif args.log != -1:
        append += " -d"
        if args.log is not None:
            append += " {}".format(args.log)
    if args.draw:
        append += " -draw"

    # if we have no flags, make append None
    if len(append) == 0: append = None
    
    # start control script
    dev.activate_Control_Script(append = append)
    sys.exit()

# then check connect
if args.command == "connect":
    try: dev.connect()
    except ScriptOff as e:
        print("Control script off. Please use 'FEU_TTM enable'")
    sys.exit()

# then check disconnect
if args.command == "disconnect":
    try: dev.disconnect()
    except ScriptOff as e:
        print("Control script off. Please use 'FEU_TTM enable'")
    sys.exit()

# next check status
if args.command == "status":
    # get position
    try:
        pos, u_time = dev.get_pos(update = args.push, time = True)
        # convert UNIX epoch time to local time
        t = localtime(u_time)
        print("Position: {} last updated {}/{}/{} {}:{}:{} {}".format(pos, t.tm_year,
            t.tm_mon, t.tm_mday, t.tm_hour, t.tm_min, t.tm_sec, t.tm_zone))
    # catch exceptions
    except StageOff as e:
        print("Device not connected. Please use 'FEU_TTM connect'")
    except ScriptOff as e:
        print("Control script off. Please use 'FEU_TTM enable'")

# last check goto
if args.command == "goto":
    # if three positions were provided, convert them to floats
    if len(args.target) == 2:
        try: args.target = [float(val) for val in args.target]
        except: 
            print("invalid parameters, see below")
            goto.print_help()
            sys.exit()
    # validate/format preset 
    elif len(args.target) == 1:
        args.target = args.target[0]
        if args.target not in dev.presets:
            print("Invalid preset, see below.")
            goto.print_help()
            sys.exit()
    # otherwise, it is invalid
    else:
        if len(args.target) != 0:
            print("Valid options are a preset or an x y. See below.")
        goto.print_help()
        sys.exit()

    try: dev.set_pos(args.target, block = True)
    except StageOff as e:
        print("Device not connected. Please us 'FEU_TTM connect'")
    except ScriptOff as e:
        print("Control script off. Please use 'FEU_TTM enable'")
    except MovementTimeout as e:
        print("Device taking too long to move. Check for blockages")
    except ShmError as e:
        elif e.args[0] == "Error 20.":
            print("Movement outside allowable range.")
        else:
            print(e.message)