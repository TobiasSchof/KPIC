#!/usr/bin/env kpython3

#inherent python libraries
from configparser import ConfigParser
from atexit import register, unregister
from signal import signal, SIGHUP, SIGTERM
from subprocess import Popen
from time import sleep
from argparse import ArgumentParser
import sys, os, logging

#installs
import numpy as np
import posix_ipc

#nfiuserver libraries
from KPIC_shmlib import shm
from Conex import Conex_Device
from NPS_cmds import NPS_cmds

"""

THIS IS A CONTROL SCRIPT FOR THE FIBER INJECTION UNIT's MODE CHANGE TRANSLATION
STAGE AND NOT FOR USE BY USER

See Mode_Change_cmds.py or type Mode_Change in terminal to control device.

"""

# This script is not an import
if __name__ != "__main__":
    print("Mode_Change_Control is not meant to be used as an import.")
    sys.exit()

info = logging.info

# Connection information for the device
HOST = "192.168.108.54"
PORT = 2007

# global tag to indicate whether this script should die
alive = True

# get location of config files
RELDIR = os.environ.get("RELDIR")
if RELDIR[-1] == "/": RELDIR = RELDIR[:-1]

class NPSError(Exception):
    """An exception to be thrown if there is an error with the NPS"""
    pass

class AlreadyAlive(Exception):
    """An exception to be thrown if control code is initialized twice"""
    pass

# This stage's encoder is a visual one so creates a lot of light leak. This
#    means that we cannot leave the stage on. To ensure we don't, we use a
#    context manager that turns the device off on exit
class devManager:
    """Context manager to turn on the device and home it on enter and turn
    it off on exit."""
    
    def __enter__(self):
        """Opens connection to the device and homes it to be ready to move"""

        # turn device on
        turn_on()

        # wait for the device to turn on
        while not q_pow(): sleep(.1)

        # check if the device has been connected to in the past
        if len(dev.lims) > 0: dev.open_telnet(HOST, PORT)
        # if this is the first time we open the device, we want to make sure
        #    config limits are compliant with software limits
        else: 
            dev.open_Telnet(HOST, PORT)
            dev.reqLim()   
            global MN
            global MX
            if MN < dev.lims["1"][0]:
                MN = dev.lims["1"][0]
                info("Changing min limit to {}.".format(dev.lims["1"][0]))
            if MX > dev.lims["1"][1]:
                MX = dev.lims["1"][1]
                info("Changing max limit to {}.".format(dev.lims["1"][1]))

        # home device - block execution
        dev.home(isBlocking=True)

        return self

    def __exit__(self, type, value, tb):
        """Closes connection to the device and turn the device off."""
        
        # close connection
        dev.close()

        # turn off device
        turn_off()

        # wait for the device to turn off
        while q_pow(): sleep(.1)

def update(error:int=0):
    """Updates all the shared memories."""

    pos = dev.getPos("all")
    # in this case, the communication isn't open
    if pos == -1:
        if not q_pow(): Stat_D.set_data(np.array([0], np.int8))

    # in this case, there was an error so split error from positions
    elif type(pos) is tuple:
        err = pos[0]["1"]
        Error.set_data(np.array([-1*(ord(err)-64)], np.int8))
        Stat_D.set_data(np.array([1], np.int8))    
    else:
        # set shms
        Error.set_data(np.array([error], np.int8))
        Pos_D.set_data(np.array([pos["1"]], np.float16))
        Stat_D.set_data(np.array([1], np.int8))    

def loop():
    """Continuously checks for requested moves and updates"""

    while alive:
        req_pos = Pos_P.get_data(check=True)

        if not alive: return

        error = 0
        # connects to device and homes on start of with, closes connection on exit
        with devManager() as wrap:
            # if requested position is within limits, send command
            if MN <= req_pos <= MX: dev.moveAbs({"1":req_pos}, isBlocking=True)
            else: error = 1
       
            # update shared memory
            update(error) 

def close():
    """Performs a clean close of this control script"""

    info("Killing draw process.")
    try: draw_proc.terminate()
    except Exception as ouch: info("Exception on close: {}".format(ouch))

    info("Deleting command shared memory files.")
    #We want to delete all command shared memories so scripts can't mistakenly
    #think the control script is alive.
    try: os.remove(Pos_P.fname)
    except Exception as ouch: info("Exception on close: {}".format(ouch))

    info("Updating state shared memory file.")
    try:
        # set state status based on above change
        Stat_D.set_data(np.array([0], Stat_D.npdtype))
    except Exception as ouch: info("Exception on close: {}".format(ouch))

    unregister(close)

    info("Closing tmux session.")
    ses = config.read("Environment", "session")
    win = config.read("Environment", "window")
    Popen(["tmux", "kill-window", "-t", "{}:{}".format(ses, win)])

def signal_handler(signum, stack):
    """A function to handle when a SIGHUP or a SIGTERM is called"""
    global alive
    alive = False
    Pos_P.sem.release()

# load the config information
config = ConfigParser()
config.read(RELDIR + "/data/Mode_Change.ini")

MN = config.getfloat("Limits", "min")
MX = config.getfloat("Limits", "max")

log_path = config.get("Communication", "debug_log")
debug_fmt="%(filename)s.%(funcName)s@%(asctime)s - %(levelname)s: %(message)s"

parser = ArgumentParser()
# flags to put into debug mode
parser.add_argument("-d", default=-1, nargs="?")
parser.add_argument("-d!", "--dd", default=-1, nargs="?")
# flag to determine whether to draw unicode display in tmux session
parser.add_argument("-draw", action = "store_true")

args = parser.parse_args()

if args.dd != -1:
    if not args.dd is None: log_path = args.dd
    logging.basicConfig(format=debug_format, datefmt="%H:%M:%S",\
        filename=log_path)
    logging.root.setLevel(logging.DEBUG)
elif args.d != -1:
    if not args.d is None: log_path = args.d
    logging.basicConfig(format=debug_format, datefmt="%H:%M:%S",\
        filename=log_path)
    logging.root.setLevel(logging.INFO)

# make the folder for shared memories if it doesn't already exist
if not os.path.isdir("/tmp/Mode_Change"): os.mkdir("/tmp/Mode_Change")

# create a dictionary to translate strings into numpy data types
type_ = {"int8":np.int8, "int16":np.int16, "int32":np.int32, "int64":np.int64,
    "uint8":np.uint8, "uint16":np.uint16, "uint32":np.uint32,
    "uint64":np.uint64, "intp":np.intp, "uintp":np.uintp, "float16":np.float16,
    "float32":np.float32, "float64":np.float64, "complex64":np.complex64,
    "complex128":np.complex128, "bool":np.bool}

# for now we just want to connect to shm to see if there's already a script
Stat_D = config.get("Shm_Info", "Stat_D").split(",")
if os.path.isfile(Stat_D[0]):
    Stat_D = shm(Stat_D[0])
    status = Stat_D.get_data()

    if status[0] & 1:
        info("Active control script exists. Raising exception.")
        msg = "State shared memory status {}.".format(status)
        raise AlreadyAlive(msg)
    else:
        status[0] = status[0] | 1
        Stat_D.set_data(status)
else:
    info("No state shared memory file. Creating file.")
    Stat_D = shm(Stat_D[0], data=np.array([1], dtype=type_[Stat_D[1]]),
        mmap = (Stat_D[2] == "1"))

Pos_D = config.get("Shm_Info", "Pos_D").split(",")
if os.path.isfile(Pos_D[0]): Pos_D = shm(Pos_D[0])
else:
    info("No state shared memory file, creating backing.")
    Pos_D = shm(Pos_D[0], data=np.array([0], dtype=type_[Pos_D[1]]),
        mmap = (Pos_D[2] == "1"))

Error = config.get("Shm_Info", "Error").split(",")
if os.path.isfile(Error[0]): Error = shm(Error[0])
else:
    info("No state shared memory file, creating backing.")
    Error = shm(Error[0], data=np.array([0], dtype=type_[Error[1]]),
        mmap = (Error[2] == "1"))

info("No duplicate control script, continuing with initialization.")

#NOTE: we want to register cleanup after Shm_D is initialized so we can edit
#   its final value

# register handles keyboard interrupts and exceptions
# signal handles tmux kill-ses and terminate commands
info("Registering cleanup")
register(close)
signal(SIGHUP, signal_handler)
signal(SIGTERM, signal_handler)

info("Initializing command shared memory from config file.")

Pos_P = config.get("Shm_Info", "Pos_P").split(",")
Pos_P = shm(Pos_P[0], data = Pos_D.get_data(), sem = True,
    mmap = (Pos_P[2] == "1"))

def unlink():
    try: Pos_P.lock.unlink()
    except (AttributeError, posix_ipc.ExistentialError) as ouch:
        info("Exception on close: {}".format(ouch))

    unregister(unlink)

register(unlink)
signal(SIGHUP, unlink)
signal(SIGTERM, unlink)

info("Command shared memories successfully created.")

info("Initializing NPS")
NPS = NPS_cmds()
info("Finding NPS port")
NPS.MC_port = None
for port in NPS.devices:
    if NPS.devices[port] == "TC mode stage":
        NPS.MC_port = port
        break
if NPS.MC_port is None:
    info("Cannot find NPS port")
    raise NPSError("Cannot find NPS port")

# convenience methods to deal with the NPS
turn_on = lambda: NPS.turnOn(NPS.MC_port)
turn_off = lambda: NPS.turnOff(NPS.MC_port)
q_pow = lambda: NPS.getStatusAll()[NPS.MC_port]

# set up Conex device
dev = Conex_Device()

# if the device is already on, connect to it
if q_pow(): turn_off()

info("Starting display drawer")
# we use popen to start the drawing script separately to prevent blocking
display_cmd = ["Mode_Change_draw"]
if args.draw: display_cmd.append("-draw")
draw_proc = Popen(display_cmd)

info("Updating shared memory")
with devManager() as wrap:
    update()

loop()
