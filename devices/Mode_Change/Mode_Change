#!/usr/bin/env kpython3

#inherent python libraries
from subprocess import Popen
from argparse import ArgumentParser, SUPPRESS
from configparser import ConfigParser
from time import sleep, ctime
import sys, io, os

#installed libraries
import numpy as np

#nfiuserver libraries
import Mode_Change_cmds

if __name__ != "__main__": sys.exit()

"""

executable to control the viewing mode controller quickly from the command line

"""

# format help message for no command/invalid command
main_help = """usage:
{b:2}Mode_Change [CMD] [-h]

CMD:
{b:2}pupil  - change to pupil plane viewing mode
{b:2}zern   - change to zernike viewing mode
{b:2}focal  - change to focal plane viewing mode
{b:2}status - check current position
{b:2}goto   - Move to a custom position
-h:
{b:2}add "-h" after a command for more info""".format(b="")

# change ArgumentParser so it prints help menu if no valid
#    option is used
class HelpArgumentParser(ArgumentParser):
    def error(self, message):
        if message.startswith("the following arguments are required:"):
            self.print_help()
        else:
            print(main_help)
        sys.exit()

# create argument parser
parser = HelpArgumentParser(add_help = False)

# add subparser so we can add tags to our commands
#   NOTE: dest allows us to check which subparser was called
sub = parser.add_subparsers(dest = "command")

# create subparser to handle pupil command
pupil = sub.add_parser("pupil")

# create subparser to handle zern command
zern = sub.add_parser("zern")

# create subparser to handle focal command
focal = sub.add_parser("focal")

# create subparser to handle status command
status = sub.add_parser("status")

# create subparser to handle goto command
goto = sub.add_parser("goto")
goto.add_argument("target", nargs = "*",
    help = "position to move to (in mm)")

args = parser.parse_args()

if args.command is None:
    print(main_help); sys.exit()

# first check pupil command
if args.command == "pupil":
    Mode_Change_cmds.pupil()

# next check zern command
elif args.command == "zern":
    Mode_Change_cmds.zern()

# then check focal
elif args.command == "focal":
    Mode_Change_cmds.focal()

# then status
elif args.command == "status":
    pos = Mode_Change_cmds.get_pos()
    print("Current position: {}".format(pos))

# last goto
elif args.command == "goto":
    if len(args.target) != 1:
        print("goto takes one float (position) as an argument")
    else:
        try: args.target = float(args.target)
        except: 
            print("position must be a float")
            sys.exit()
        Mode_Change_cmds.set_pos(args.target)