#!/usr/bin/env kpython3

# inherent python libraries
from time import sleep, gmtime
from configparser import ConfigParser
from atexit import register, unregister
from signal import SIGHUP, SIGTERM, signal
from subprocess import Popen
import telnetlib, os, sys

# installed libraries
import numpy as np
from posix_ipc import Semaphore, O_CREX

# nfiuserver libraries
from KPIC_shmlib import Shm


# This script is not an import
if __name__ != "__main__":
    print("NPS_Control is not meant to be used as an import.")
    sys.exit()

class AlreadyAlive(Exception):
    """An exception to be thrown if control code is initialized twice."""
    pass

class NPS:
    """A context manager to open and close connection to NPS"""

    def __init__(self):
        """Gets required information for connection"""

        pass

    def __enter__(self):
        """Opens connection"""

        # Start telnet connection
        try: self.telnet = telnetlib.Telnet(address, port)
        except: raise ConnectionError("Controller connection failed.")

        # Wait 0.5 second
        sleep(0.5)

        # Establish comms
        self.telnet.write(("@@@@\r\n").encode('ascii'))
        res = self.telnet.expect([bytes("IPC ONLINE!", 'utf-8')], TIMEOUT)

        if(res[0] == -1):
            #Timed out
            self.telnet.close()
            raise ConnectionError("Connection timeout on startup.")
        # Wait 0.5 second
        sleep(0.5)

        return self.telnet

    def __exit__(self, type, value, tb):
        """Closes connection"""
        
        try:
            # send logout command
            self.telnet.write(("LO\r\n").encode('ascii'))
            res = self.telnet.expect([bytes("LOGGED-OUT!", 'utf-8')], TIMEOUT)

            #timed out
            if(res[0] == -1):
                raise ConnectionError("Connection timeout on logout.")
        finally:
            self.telnet.close()

def main():
    """The main loop that waits for a shm to be updated and acts"""

    old = Shm_P.get_data()[0]

    while alive:

        # get latest P_shm
        new = Shm_P.get_data(check = True)[0]

        # have an exit if we're supposed to end the script
        if not alive: break

        # get which ports have changed
        on = new & ~old
        off = old & ~new

        # convert on and off to lists of ports
        on = [idx+1 for idx, val in enumerate(format(on, "08b")) if val == "1"]
        off = [idx+1 for idx, val in enumerate(format(off, "08b")) if val == "1"]

        # make a list to store successful on/off
        done = []

        # open telnet connection
        with NPS() as telnet:
            # turn on ports
            for port in on:
                telnet.write("N0{}\r\n".format(port).encode("ascii"))
                res = telnet.expect([bytes["DONE", "utf-8")], TIMEOUT])
                # if we timeout, store that
                if res[0] == -1: dont.append([port, "TIMEOUT", time()])
                # if we didn't timeout, we stored result
                else: done.append([port, "ON", time()])
            # turn off ports
            for port in off:
                telnet.write("F0{}\r\n".format(port).encode("ascii"))
                res = telnet.expect([bytes["DONE", "utf-8")], TIMEOUT])
                # if we timeout, store that
                if res[0] == -1: dont.append([port, "TIMEOUT", gmtime()])
                # if we didn't timeout, we stored result
                else: done.append([port, "OFF", time()])

            # update D Shm
            update(telnet)

        # log result
        log(done)

def update(telnet):
    """Updates all shared memories with current status
    
    Args:
        telnet = a telnet connection
    """

    # Query all outlets (device does not have an easy way to query single)
    telnet.write(("DX0\r\n").encode("ascii"))

    devstat = []
    for port in range(1, 9):
        tmp_1 = "OUTLET {} ON".format(port)
        tmp_2 = "OUTLET {} OFF".format(port)
        fmt = "utf-8"
        res = relnet.expect([bytes(tmp_1, fmt), bytes(tmp_2, fmt)], TIMEOUT)

        # port is on
        if res[0] == 0: devstat.append(True)
        # port is off (-1 is timeout)
        elif res[0] != -1: devstat.append(False)

    # update Shm_D
    stat = ("{:d}"*8).format(*devstat)
    Shm_D.set_data(np.array([int(stat, 2)], dtype = Shm_D.npdtype))

def log(actions:list):
    """Updates the log associated with the NPS

    Args:
        actions = a list with 3 elements. [port, message, time]
    """

    gmt = gmtime()
    year = "{}".format(gmt.tm_year)[-2:]
    date = "{}{:02d}{:02d}".format(year, gmt.tm_mon, gmt.tm_mday)

    # get the path to today's folder
    cur_path = "{}/{}".format(DATA, date)
    # check whether the date of the last state shared memory update has a folder
    try: 
        if not os.path.isdir(cur_path): os.mkdir(cur_path)
    except FileNotFoundError: print("DATA variable set incorrectly")

    # check for existence of LOG folder within today's dated folder
    cur_path += "/LOG"
    if not os.path.isdir(cur_path): os.mkdir(cur_path)

    # format log message
    msg = "{date:<11}{time:<10}GMT -- Port {port}: {val}\n"
    for item in actions:
        # log a change if there's a new value
        port = item[0]
        val = item[1]
        gmt = item[2]
        date = "{:04d}/{:02d}/{:02d}".format(gmt.tm_year, gmt.tm_mon, gmt.tm_mday)
        log_t = "{:02d}:{:02d}:{:02d}".format(gmt.tm_hour, gmt.tm_min, gmt.tm_sec)

        with open("{}/{}".format(cur_path, LOG_FILE), "a") as log:
            log.write(msg.format(date = date, time = log_t, port = port, val = val))

def close():
    """A cleanup method"""

    # delete P Shm and its lock
    try:
        try: Shm_P.lock.unlink(); Shm_P.lock.close()
        except: pass
        try: os.remove(Shm_P.fname)
        except: pass
    except: pass

    # unregister this method now that it's completed to avoid running it twice
    unregister(close)
    os.system(config.get("Environment", "end_command"))

def signal_handler(signum, stack):
    """A method to handle signals"""

    global alive
    alive = False
    try: Shm_P.sem.release()
    except: pass

# The root directory for where config files are stored
RELDIR = os.environ.get("RELDIR")
if RELDIR[-1] == "/": RELDIR = RELDIR[-1]

# The path to the directory where data is stored (for logging)
DATA = os.environ.get("DATA")
try:
    if DATA[-1] == "/": DATA=DATA[:-1]
except TypeError:
    DATA = "/nfiudata"
    print("No DATA environment variable, using '/nfiudata/'")

# the name of the log file (appended to DATA/YYYMMDD/LOGS)
LOG_FILE = "NPS.log"

# when alive is set to False, the script will end
alive = True

# read config file
config = ConfigParser()
config.read(RELDIR+"/data/NPS.ini")

model = config.get("Device_Info", "model").strip()
if model == "IPC34XX":
    # These are not currently used but are left here to make it
    # easier to implement IPC32 vs 34 control
    StatusFnc   = 'IPC34XX_Status'
    PowerOnFnc  = 'IPC34XX_On'
    PowerOffFnc = 'IPC34XX_Off'
elif model == "IPC32XX":
    # This library is not meant to be used with this model
    msg = "This library is currently not set up to handle IPC32XX" +\
        " controllers."
    raise Exception(msg)
else:
    msg = "Invalid pulizzi model: {}".format(model)
    raise Exception(msg)

# load communication info
address = config.get("Communication", "address")
port = config.get("Communication", "port")
TIMEOUT = 3.0

if not os.path.isdir("/tmp/NPS"): os.mkdir("/tmp/NPS")

# create a dictionary to translate strings into numpy data types
type_ = {"int8":np.int8, "int16":np.int16, "int32":np.int32, "int64":np.int64,
    "uint8":np.uint8, "uint16":np.uint16, "uint32":np.uint32,
    "uint64":np.uint64, "intp":np.intp, "uintp":np.uintp, "float16":np.float16,
    "float32":np.float32, "float64":np.float64, "complex64":np.complex64,
    "complex128":np.complex128}

# get the first shm path to see if it exists
check = config.get("Shm Info", "P_Shm")
check = check.split(",")[0]
# if the shm file exists, it means that another NPS control script is alive
if os.path.isfile(check): raise AlreadyAlive("NPS control script already alive.")
else: check = None

# connect to Shm D
Shm_D = config.get("Shm Info", "D_Shm").split(",")
Shm_D = Shm(Shm_D[0], np.array([0], type_[Shm_D[1]]), mmap = Shm_D[2] == "1")

# get current status of ports
with NPS() as telnet: update(telnet)

# make Shm P reflect Shm D
Shm_P = config.get("Shm Info", "P_Shm").split(",")
Shm_P = Shm(Shm_P[0], Shm_D.get_data(), mmap = Shm_P[2] == "1", sem = True)

# register close after creating Shm P so that we can delete the lock
register(close)
signal(SIGHUP, signal_handler)
signal(SIGTERM, signal_handler)

main()