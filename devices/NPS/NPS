#!/usr/bin/env kpython3

# inherent python libraries
from configparser import ConfigParser
from time import sleep
import sys, os

# nfiuserver libraries
from NPS_cmds import NPS_cmds
from KPIC_shmlib import Shm

# exit if this script is not being used as command line
if __name__ != "__main__": 
    print("NPS not meant to be used as an import")
    sys.exit()

def usage():
    print ("""----------------------------------------------------------
Usage: {0} <command> <arg>
----------------------------------------------------------
COMMAND:
    status     displays status of all ports
    on         turns on selected ports
    off        turns off selected ports
    devices    lists which ports devices are connected to
    help       offers help with the {0} library
ARG:
    port # - accepts an integer between 1 and 8. 
             Minimum # of channels that can be 
             specified is 1, and maximum is 8. 
    script - activates control script 
EXAMPLES:
    {0} status
    {0} on script
    {0} on 2 3
    {0} off 2 3
    {0} devices
----------------------------------------------------------""".format("NPS"))
    sys.exit()

args = sys.argv[1:]

# flags that are understood
help_cmds    = ["help", "h", "-h", "--help"]
on_cmds      = ["on"]
off_cmds     = ["off"]
devices_cmds = ["devices", "devs"]
status_cmds  = ["status", "stat"]
stale_cmds    = ["no-push", "-stale", "stale"]
cmds = help_cmds + on_cmds + off_cmds + devices_cmds + status_cmds

# store flags in a more readable way
on = []
off = []
script_on = False
status = False
no_push = False
devices = False
idx = 0
# parse flags
while idx < len(args):
    f = args[idx].strip().lower()
    # display help
    if f in help_cmds:
        usage()
        sys.exit()
    # get which ports to turn on
    elif f in on_cmds:
        while idx+1 < len(args) and args[idx+1] not in cmds:
            f = args[idx+1].strip().lower()
            if f.isdigit():
                f = int(f)
                if f in range(1, 9): on.append(f) 
                else: 
                    print("ignoring 'on' command for port {}. Valid ports are 1-8.".format(f))
            elif f == "script": script_on = True
            else: print("{} not understood".format(f))
            idx += 1
    # get which ports to turn off
    elif f in off_cmds:
        while idx+1 < len(args) and args[idx+1] not in cmds:
            f = args[idx+1].strip().lower()
            if f.isdigit():
                f = int(f)
                if f in range(1, 9): off.append(f) 
                else: 
                    print("ignoring 'on' command for port {}. Valid ports are 1-8.".format(f))
            else: print("{} not understood".format(f))
            idx += 1
    # interpret device and status flags
    elif f in devices_cmds: devices = True
    elif f in status_cmds: 
        status = True
        if (idx + 1) < len(args) and args[idx + 1].strip().lower() in stale_cmds: 
            no_push = True
            idx += 1

    idx += 1

# create NPS_cmds object
nps = NPS_cmds()

# print device information
if devices:
    msg = "NPS port assignment:\n\n"

    for port in nps.ports:
        p_msg = "Port: {port} | Device Name: {name:<15} | Description: {descr}\n"
        name = nps.ports[port][0]
        if len(name) > 15: name = name[11:] + "..."
        descr = nps.ports[port][1]
        p_msg = p_msg.format(port = port, name = name, descr = descr)
        if len(p_msg) > 81:
            p_msg = p_msg[:76] + "...\n"
        msg += p_msg

    print(msg)
    sys.exit()

# turn on control script
if script_on and not nps.is_Active():
    nps.activate_Control_Script()
    cnt = 0
    # sleep while we wait for device to turn on
    while not nps.is_Active(): 
        print("\rTurning on NPS control script{:<4}".format("."*cnt), end = "")
        cnt += 1
        sleep(.5)
    print("\r{:<34}".format("Control script turned on."))

if no_push:
    print(nps.getPrintableStatusAll(update = False))
    sys.exit() 

# raise issue if script isn't on
if not nps.is_Active():
    print("NPS CONTROL SCRIPT NOT ACTIVE. PLEASE USE 'NPS on script'.")
    sys.exit()

# print status
if status:
    print(nps.getPrintableStatusAll())
    sys.exit()

# turn on/off requested ports
if len(on) > 0: 
    nps.turnOn(on)
if len(off) > 0:
    nps.turnOff(off)