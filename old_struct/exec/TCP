#!/usr/bin/env kpython3

#command line executable to talk to the TCP

if __name__=="__main__":

    #out of the box libraries
    from subprocess import Popen as bash
    from argparse import ArgumentParser, SUPPRESS
    from configparser import ConfigParser
    from time import sleep, ctime
    import numpy as np
    import sys, io

    #telescope libraries
    sys.path.insert(1, "/kroot/src/kss/nirspec/nsfiu/lib")

    from sce_shmlib import shm

    """

    executable to control the TCP quickly from the command line

    """
    
    config_path="/kroot/src/kss/nirspec/nsfiu/config/"

    config=ConfigParser()
    config.read(config_path+"TCP.ini")

    _debugFormat="%(filename)s.%(funcName)s@%(asctime)s - %(levelname)s: %(message)s"
    _logDefault=config.get("Communication", "log_path")

    parser=ArgumentParser(conflict_handler="resolve", description="Controls the TCP.")

	#create debug help message
    debugHelp="Sets the program to a debug mode({level} level). Default log location is {logDef}. Can also use this tag to specify a different log location."	
	
	#add subparser to handle device commands.
    dev=parser.add_subparsers(help="Device commands")
	
    msg="Return the current position of the TCP."
    pos=dev.add_parser("status", help=msg, description=msg)
    pos.add_argument("-status", help=SUPPRESS)
    pos.add_argument("-push", action="store_true", help="Updates shared memory first.")

    msg="Enables the TCP control script."
    enable=dev.add_parser("enable", help=msg, description=msg)
    enable.add_argument("-enable", help=SUPPRESS)
    enable.add_argument("-d", "--debug", default=-1, nargs="?", help=debugHelp.format(level="INFO", logDef=("console" if _logDefault==None else _logDefault)))
    enable.add_argument("-d!", "--deepDebug", default=-1, nargs="?", help=debugHelp.format(level="DEBUG", logDef=("console" if _logDefault==None else _logDefault)))
    enable.add_argument("-m", "--move", action="store_true", help="Lets the TTM move/reference on startup")

    msg="Disables the TCP control script."
    disable=dev.add_parser("disable", help=msg, description=msg)
    disable.add_argument("-disable", help=SUPPRESS)

    msg="Homes the TCP."
    ref=dev.add_parser("ref", help=msg, description=msg)
    ref.add_argument("-ref", help=SUPPRESS)

    msg="Moves TCP to the given slot."
    mir=dev.add_parser("slot", help=msg, description=msg)
    mir.add_argument("slot", nargs="?", default=None, help="The mirror to move to")
    mir.add_argument("-move", help=SUPPRESS)

    msg="Moves the TCP to a position relative to the current one."
    nudge=dev.add_parser("nudge", help=msg, description=msg)
    nudge.add_argument("nudge", type=float, nargs="?", default=None, help="The amount to move.")
    nudge.add_argument("-move", help=SUPPRESS)

    msg="Moves TCP to the given position."
    moveAbs=dev.add_parser("goto", help=msg, description=msg)
    moveAbs.add_argument("goto", type=float, nargs="?", default=None, help="The position to move to.")
    moveAbs.add_argument("-move", help=SUPPRESS)

    msg="Opens the loop (turns servo off)"
    open_=dev.add_parser("open", help=msg, description=msg)
    open_.add_argument("-open", help=SUPPRESS)

    msg="Closes the loop (turns servos on)"
    close_=dev.add_parser("close", help=msg, description=msg)
    close_.add_argument("-close", help=SUPPRESS)

    msg="Turns the TCP on"
    on=dev.add_parser("on", help=msg, description=msg)
    on.add_argument("-on", help=SUPPRESS)

    msg="Turns the TCP off"
    off=dev.add_parser("off", help=msg, description=msg)
    off.add_argument("-off", help=SUPPRESS)

	#override -h flag to show the "usage" window
    parser.add_argument("-h", action="store_true")
	
    args=parser.parse_args()


    #start control script if enable tag was used
    if "enable" in args:
        command=config.get("Environment", "start_command").split(" ")
        if args.move:
            command.append("-m")
        if args.debug != -1:
            command.append("-d")
            if args.debug is not None:
                command.append(args.debug)

        bash(command)
        sys.exit()

    #for anything else we will want shared memory so enable it
    str_d={}
    for name in config.options("Shm_D_Content"):
        str_d[name]=np.int(config.getfloat("Shm_D_Content", name))

    #creating shared memory is loud, so quiet it.
    _ = io.StringIO()
    sys.stdout = _
    Shm_D=shm(config.get("Shm_path", "Shm_D"))
    sys.stdout = sys.__stdout__
    try:
        dataD=Shm_D.get_data()
    except AttributeError:
        if not "disable" in args:    
            print()
            print("NO SHARED MEMORY. PLEASE USE 'TCP enable'")
            print()
        sys.exit()

    #if position was requested without push, we don't need the device to be on
    if "status" in args and not args.push:
        pos=dataD[str_d["pos"]].item()
        time=ctime(dataD[str_d["cur_t"]].item())
        print("Position: {}. Data was updated at {}.".format(pos, time))
        sys.exit()

    #if command script is off, tell user to turn it on
    if dataD[str_d["status"]].item() in [-1, -2]:
        if not "disable" in args:    
            print()
            print("CONTROL SCRIPT OFF. PLEASE USE 'TCP enable' OR 'TCP status'")
            print()
        sys.exit()

    #at this point, we want command shared memory
    str_p={}
    for name in config.options("Shm_P_Content"):
        str_p[name]=np.int(config.getfloat("Shm_P_Content", name))

    _ = io.StringIO()
    sys.stdout = _
    Shm_P=shm(config.get("Shm_path", "Shm_P"))
    sys.stdout = sys.__stdout__
    #Note, at this point we know the script status reflects the script is alive
    #so command shared memory should be valid, but just in case, check 
    try:
        dataP=Shm_P.get_data()
    except AttributeError:
        print()
        print("NO SHARED MEMORY. PLEASE USE 'TCP enable' OR 'TCP status'")
        print()
        sys.exit()

    if "disable" in args:
        dataP[str_p["status"]] = -1
        Shm_P.set_data(dataP)
        sys.exit()

    if "on" in args:
        dataP[str_p["status"]] = 1
        Shm_P.set_data(dataP)
        sys.exit()

    if "off" in args:
        dataP[str_p["status"]] = 0
        Shm_P.set_data(dataP)
        sys.exit()

    #Now we need the device on
    if dataD[str_d["status"]].item() == 0:
        print()
        print("DEVICE OFF. PLEASE USE 'TCP on'")
        print()
        sys.exit()
        
    if "open" in args:
        dataP[str_p["svos"]]=0
        Shm_P.set_data(dataP)
        sys.exit()
        
    if "close" in args:
        dataP[str_p["svos"]]=1
        Shm_P.set_data(dataP)
        sys.exit()
        
    if "ref" in args:
        dataP[str_p["status"]]=2
        Shm_P.set_data(dataP)
        sys.exit()
        
    #we checked for status without push earlier, so this one has it
    if "status" in args:
        time=dataD[str_d["cur_t"]].item()
        Shm_P.set_data(Shm_P.get_data())
        #wait for shared memory to be updated
        while time == Shm_D.get_data()[str_d["cur_t"]].item(): sleep(.01)

        dataD=Shm_D.get_data()
        pos=dataD[str_d["pos"]].item()
        time=ctime(dataD[str_d["cur_t"]].item())
        error=dataD[str_d["error"]].item()
        print("Position: {}. Data was updated at {}.".format(pos, time))
        if error == 2:
            print()
            print("Device is unreferenced. Position information unreliable.")
            print("Use 'TCP ref' and check status again to get accurate info.")
            print()
        sys.exit()

    if "move" in args:
        error=dataD[str_d["error"]]
        #2 is UnreferencedAxis error
        if error == 2:
            print()
            print("DEVICE IS UNREFERENCED. MUST USE 'TCP ref' BEFORE MOVE POSSIBLE")
            print()
            sys.exit()

        pos = None
        if "slot" in args and not args.slot is None:
            slots={}
            for x in [1, 2, 3]:
                slots[str(x)]=config.get("Slots", "pos{}".format(x))
                slots[config.get("Slots", "name{}".format(x))] = config.get("Slots", "pos{}".format(x))
            try:
                pos=slots[args.slot]
            except KeyError:
                print("INVALID SLOT. SEE BELOW.")
        elif "nudge" in args and not args.nudge is None:
            pos = args.nudge+dataD[str_d["pos"]]
        elif "goto" in args and not args.goto is None:
            pos = args.goto

        #if pos is none, it means that no valid movement argument was provided
        if not pos is None:
            #save time of last update
            time=dataD[str_d["cur_t"]].item()
            dataP[str_p["pos"]]=pos
            Shm_P.set_data(dataP)
            #wait for shared memory to be updated
            #NOTE: semaphores unuseable because we don't know how many times
            #any semaphores have been updated
            while time == Shm_D.get_data()[str_d["cur_t"]].item(): sleep(.01)
            dataD=Shm_D.get_data()
            if dataD[str_d["error"]].item() == 1:
                print("REQUESTED MOVE OUTSIDE OF LIMITS. SEE BELOW.")
            elif dataD[str_d["error"]].item() == 2:
                print()
                print("DEVICE IS UNREFERENCED. MUST USE 'TCP ref' BEFORE MOVE POSSIBLE")
                print()
                sys.exit()
            elif dataD[str_d["error"]].item() == 3:
                print()
                print("MOVE TIMED OUT. CHECK FOR BLOCKAGES.")
                print()
                sys.exit()
            else:
                sys.exit()

    #at this point, all tags were parsed so all that's left is help menu
    #check if we should display a move help window or general
    if not "move" in args:
        cmds=["slot", "nudge", "goto", "status"]
        print("""
--------------------------------------------
Movement:
      - - - - - - - - - - - - - - - -      
TCP <CMD> <POS>  
--------------------------------------------
CMD:
{b:3}{:<8}move to a predefined slot
{b:3}{:<8}move relative to current position
{b:3}{:<8}move to an absoluate position

Type TCP <CMD> for examples and limits
--------------------------------------------
Query:
      - - - - - - - - - - - - - - - -      
TCP <CMD> [-push]
--------------------------------------------
CMD:
{b:3}{:<8}get position and time from
{b:11}shared memory
[-push]:
{b:3}optional tag for query commands that 
{b:11}updates shared memory before
{b:11}returning.
EXAMPLES:
{b:3}TCP status
{b:3}TCP status -push
--------------------------------------------

Type man TCP for comprehensive command list

""".format(*cmds, b=""))
        sys.exit()
            
    if "slot" in args:
        cmd="slot"
        description="the slot to move to"
        slots={}
        for x in [1, 2, 3]:
            slots[x]=config.get("Slots", "pos{}".format(x))
            slots[config.get("Slots", "name{}".format(x))] = config.get("Slots", "pos{}".format(x))
        opt_msg="valid options:\n{b:7}{}, {}\n{b:7}{}, {}\n{b:7}{}, {}"
        opt_msg=opt_msg.format(*slots, b="")
        use1=[*slots][0]
        use2=[*slots][1]
        use3=[*slots][2]
    else:
        min_=config.getfloat("TCP_Limits", "min")
        max_=config.getfloat("TCP_Limits", "max")

        if "goto" in args:
            cmd="goto"
            description="the absolute position to move to"
            opt_msg="(must be between {} and {})".format(min_, max_)
        elif "nudge" in args:
            cmd="nudge"
            description="move amount relative to current position"
            cur_pos=dataD[str_d["pos"]].item()
            min_ -= cur_pos
            max_ -= cur_pos
            opt_msg="(must be between {:.3f} and {:.3f})".format(min_, max_)
        third=(max_-min_)/3
        use1="{:.2f}".format(min_+third)
        use2="{:.0f}".format(min_+2*third)
        use3="{:.1f}".format(min_+.5*third) 

    print("""
--------------------------------------------
Usage: TCP {cmd} <ARG>
--------------------------------------------
ARG:
{b:3}{description}
{b:5}{opt_msg}

EXAMPLES:
{b:3}TCP {cmd} {use1}
{b:3}TCP {cmd} {use2}
{b:3}TCP {cmd} {use3}
--------------------------------------------

ERROR: invalid ARG. Please see above.
""".format(description=description, cmd=cmd, use1=use1, use2=use2, use3=use3, opt_msg=opt_msg, b=""))
