#!/usr/bin/env kpython3

# standard library
import os
from atexit import register, unregister
from signal import signal, SIGHUP, SIGTERM
from configparser import ConfigParser
from time import sleep
from subprocess import Popen

# installs
import numpy as np
from scipy.signal import medfilt
from astropy.io import fits

# nfiuserver libraries
from KPIC_shmlib import Shm
from Track_Cam_cmds import TC_cmds
from dev_Exceptions import *

# coefficient for bad pixel filter
BPM_FILT = 3.5

def main():
    """Method to process an image"""

    # get the current counter for error so we know if we've set one
    err_cnt = Error.get_counter()

    # get stat
    stat = Stat.get_data()[0]

    # if processing isn't set, wait for update
    if not stat & 1:
        Stat.get_data(True)
        return 

    # next check whether we should work off raw frames or track processing
    #   process image
    global avg, raw
    if stat & 2:
        # get status of tracking processing script
        # and try to pull image in tracking shm
        try: 
            b_stat = Track_stat.get_data()[0]
            im = Track_img.get_data(reform = True)
        except:
            try:
                load_track_shms()
                b_stat = Track_stat.get_data()[0]
                im = Track_img.get_data(reform = True)
            except:
                Error.set_data(np.array([2], Error.npdtype))
                sleep(.1)
                return 
    else:
        # if tracking camera isn't connected
        if not tc.is_connected():
            # set error
            Error.set_data(np.array([1], Error.npdtype))
            # sleep
            sleep(.1)
            # retry
            return

        avg, raw = roll_avg(avg, raw)

        # work on a copy of avg so that we have the rolling avg
        #   to work with next time
        im = avg.copy()

    # store which frame (if any) to subtract
    im_subtract = None

    # get the bad pixel map (may need to modify it)
    global _bpm    

    # if camera parameters have changed since the last bias
    #   load, try to load a new bias (we do this to calculate
    #   new bad pixel map on parameter change)
    global _bias
    cur_head = tc._get_header()
    if type(_bias) is not fits.HDUList or _bias[0].header != cur_head:

        # format bias file name based on camera parameters from header
        fname = tc.b_dir + tc.b_fname.format(fps = cur_head["fps"], tint = cur_head["tint"],
            ndr = cur_head["ndr"], temp = cur_head["t_setp"], lb = cur_head["crop_LB"], 
            rb = cur_head["crop_RB"], ub = cur_head["crop_UB"], bb = cur_head["crop_BB"])

        crop = False
        # if bias file doesn't exist, check for bias file with full crop
        if not os.path.isfile(fname):
            fname = tc.b_dir + tc.b_fname.format(fps = cur_head["fps"], tint = cur_head["tint"],
                ndr = cur_head["ndr"], temp = cur_head["t_setp"], lb = 0, rb = 0, ub = 0, bb = 0) 
            crop = True
            # if bias file still doesn't exist, post error
            if not os.path.isfile(fname):
                Error.set_data(np.array([9], Error.npdtype))

        if os.path.isfile(fname):
            # load bias from file
            with fits.open(fname) as f:
                _bias = fits.HDUList([f[0].copy()])

            # if bias is raw and contains first
            #   four pixels, copy over them (tags)
            try:
                check = _bias[6].header["medfilt"]
                # warning for bias not being raw
                Error.set_data(np.array([5], Error.npdtype))
            # if the header doesn't have the "medfilt" tag,
            #   it's a raw image
            except:
                try:
                    if _bias[0].header["CROP_UB"] == 0 and _bias[0].header["CROP_LB"] < 4:
                        _bias[0].data[0,:int(4-_bias[0].header["CROP_LB"])] = _bias[0].data[0,int(4-_bias[0].header["CROP_LB"])]
                except:
                    # set error
                    Error.set_data(np.array([4], Error.npdtype))
                    # sleep
                    sleep(.1)
                    # retry
                    return

                # calculate bad pixel map
                bpm = np.ones_like(_bias[0].data)
                std = np.std(_bias[0].data)
                mu = np.median(_bias[0].data)
                bpm[_bias[0].data > mu + BPM_FILT*std] = 0
                bpm[_bias[0].data < mu - BPM_FILT*std] = 0

                #also save bpm as second frame in _bias
                _bias.append(fits.PrimaryHDU(bpm))
                _bpm = _bias

    # get frame to subtract, respecting larger bits first
    # check reference
    if stat & 32:
        # if reference frame has been updated recently, load it
        if Ref.mtdata["cnt0"] != Ref.get_counter():
            fpath = Ref.get_data(reform = True)
            # load reference image
            if os.path.isfile(fpath):
                with fits.open(fpath) as f:
                    global _ref
                    # pull out first fits image
                    _ref = fits.HDUList([f[0].copy()])

                # if reference image is raw and contains first
                #   four pixels, copy over them (tags)
                try:
                    check = _ref.header["medfilt"]
                # if the header doesn't have the "medfilt" tag,
                #   it's a raw image
                except:
                    try:
                        if _ref[0].header["CROP_UB"] == 0 and _ref[0].header["CROP_LB"] < 4:
                            _ref[0].data[:int(4-_ref[0].header["CROP_LB"])] = _ref[0].data[int(4-_ref[0].header["CROP_LB"])]
                    except:
                        # set error
                        Error.set_data(np.array([4], Error.npdtype))
                        # sleep
                        sleep(.1)
                        # retry
                        return
            else:
                # set error
                Error.set_data(np.array([3], Error.npdtype))
                # sleep
                sleep(.1)
                # retry
                return

        im_subtract = _ref        
    # check background
    elif stat & 16 and not (stat & 2 and b_stat & 2):
        # if background frame has been updated recently, load it
        if Bkgrd.mtdata["cnt0"] != Bkgrd.get_counter():
            fpath = Bkgrd.get_data(reform = True)
            # load background image
            if os.path.isfile(fpath):
                with fits.open(fpath) as f:
                    global _bkgrd
                    # pull out first fits image
                    _bkgrd = fits.HDUList([f[0].copy()])

                # if background image is raw and contains first
                #   four pixels, copy over them (tags)
                try:
                    check = _bkgrd.header["medfilt"]
                    # warning for background not being raw
                    Error.set_data(np.array([5], Error.npdtype))
                # if the header doesn't have the "medfilt" tag,
                #   it's a raw image
                except:
                    try:
                        if _bkgrd[0].header["CROP_UB"] == 0 and _bkgrd[0].header["CROP_LB"] < 4:
                            _bkgrd[0].data[0,:int(4-_bkgrd[0].header["CROP_LB"])] = _bkgrd[0].data[0,int(4-_bkgrd[0].header["CROP_LB"])]
                    except:
                        # set error
                        Error.set_data(np.array([4], Error.npdtype))
                        # sleep
                        sleep(.1)
                        # retry
                        return

                    # calculate bad pixel map
                    #   (only makes sense to do if image is raw)
                    bpm = np.ones_like(_bkgrd[0].data)
                    std = np.std(_bkgrd[0].data)
                    mu = np.median(_bkgrd[0].data)
                    bpm[_bkgrd[0].data > mu + BPM_FILT*std] = 0
                    bpm[_bkgrd[0].data < mu - BPM_FILT*std] = 0

                    # also save bpm as second frame in _bkgrd
                    _bkgrd.append(fits.PrimaryHDU(bpm))
                    _bpm = _bkgrd
            else:
                # set error
                Error.set_data(np.array([3], Error.npdtype))
                # sleep
                sleep(.1)
                # retry
                return

        im_subtract = _bkgrd
    # check bias
    elif stat & 8 and not stat & 2:
        # bias should already be loaded
        im_subtract = _bias

    # get cropping to check bpm and subtraction frame
    cam_crop = tc.get_crop()

    # check if we need to crop the bad pixel map
    try:
        bpm_crop = [_bpm[0].header["CROP_LB"], _bpm[0].header["CROP_RB"],
                    _bpm[0].header["CROP_UB"], _bpm[0].header["CROP_BB"]]
        # cropping doesn't match, so see if we can crop subtraction frame
        assert bpm_crop[0] <= cam_crop[0]
        assert (bpm_crop[1] == 0 or bpm_crop[1] >= cam_crop[1])
        assert bpm_crop[2] <= cam_crop[2]
        assert (bpm_crop[3] == 0 or bpm_crop[3] >= cam_crop[3])
        # calculate what cropping we need on the image
        if not (bpm_crop == cam_crop):
            do_crop = [bpm_crop[0] - cam_crop[0],
                        cam_crop[1] if cam_crop[1] != 0 else 511,
                        bpm_crop[2] - cam_crop[2],
                        cam_crop[3] if cam_crop[3] != 0 else 639]
            bpm = _bpm[1].data[do_crop[2]:do_crop[3]+1, do_crop[0]:do_crop[1]+1].copy()
        else:
            bpm = _bpm[1].data.copy()
        # check other parameters for bpm
        try:
            assert tc.get_tint() == _bpm[0].header["TINT"]
            assert tc.get_fps() == _bpm[0].header["FPS"]
            assert tc.get_ndr() == _bpm[0].header["NDR"]
            # check temperature setpoint
            assert tc.Temp_P.get_data()[0] == _bpm[0].header["T_SETP"]
        except AssertionError:
            # set warning
            Error.set_data(np.array([11], Error.npdtype))
        except:
            # set warning
            Error.set_data(np.array([12], Error.npdtype))
    except AssertionError:
        bpm = None
        Error.set_data(np.array([10], Error.npdtype))
    except:
        bpm = None
        # set warning
        Error.set_data(np.array([12], Error.npdtype))

    # do image subtraction
    if im_subtract is not None:
        im_sub = None
        # check camera parameters
        # first check that cropping fits
        try:
            im_crop = [im_subtract[0].header["CROP_LB"], im_subtract[0].header["CROP_RB"],
                        im_subtract[0].header["CROP_UB"], im_subtract[0].header["CROP_BB"]]
            # cropping doesn't match, so see if we can crop subtraction frame
            assert im_crop[0] <= cam_crop[0]
            assert (im_crop[1] == 0 or im_crop[1] >= cam_crop[1])
            assert im_crop[2] <= cam_crop[2]
            assert (im_crop[3] == 0 or im_crop[3] >= cam_crop[3])
            # calculate what cropping we need on the image
            if not (im_crop == cam_crop):
                do_crop = [cam_crop[0] - im_crop[0],
                           cam_crop[1] if cam_crop[1] != 0 else 511,
                           cam_crop[2] - im_crop[2],
                           cam_crop[3] if cam_crop[3] != 0 else 639]
                im_sub = im_subtract[0].data[do_crop[2]:do_crop[3]+1, do_crop[0]:do_crop[1]+1].copy()
            else:
                im_sub = im_subtract[0].data.copy()
        except AssertionError:
            Error.set_data(np.array([7], Error.npdtype))
            sleep(.1)
            return
        except:
            # set error
            Error.set_data(np.array([4], Error.npdtype))
            # try again after delay
            sleep(.1)
            return
        # then check big 4 parameters
        try:
            assert tc.get_tint() == im_subtract[0].header["TINT"]
            assert tc.get_fps() == im_subtract[0].header["FPS"]
            assert tc.get_ndr() == im_subtract[0].header["NDR"]
            # check temperature setpoint
            assert tc.Temp_P.get_data()[0] == im_subtract[0].header["T_SETP"]
        except AssertionError:
            # set warning
            Error.set_data(np.array([8], Error.npdtype))
        except:
            # set error
            Error.set_data(np.array([4], Error.npdtype))
            # try again after delay
            sleep(.1)
            return

        # check if we need to process subtraction frame
        if stat & 2:
            try:
                b_stat = Track_stat.get_data()[0]
            except:
                Error.set_data(np.array([2], Error.npdtype))
                sleep(.1)
                return

            # apply median filter to subtraction frame if necessary
            if b_stat & 4:
                im_sub = medfilt(im_sub)

        try:
            im -= im_sub
        except:
            Error.set_data(np.array([13], Error.npdtype))

    # multiply by bad pixel map
    if bpm is not None:
        try: im *= bpm
        except: Error.set_data(np.array([14], Error.npdtype))

    # medfilt if requested
    if stat & 4 and not stat & 2:
        im = medfilt(im)

    # apply any scale that was requested
    scl = Scale.get_data()[0]
    if scl == 1:
        # form a mask so image doesn't have to be clipped
        mask = np.ma.masked_greater(im, 0).mask
        im = np.log10(im, where=mask)
    elif scl == 2:
        # form a mask so image doesn't have to be clipped
        mask = np.ma.masked_greater_equal(im, 0).mask
        im = np.sqrt(im, where=mask)

    # set image in shm
    Proc.set_data(im.astype(np.int16))

    # if we haven't set any errors this round and there is an error
    #   stored, clear it
    if err_cnt == Error.get_counter() and Error.get_data()[0] != 0:
        Error.set_data(np.array([0], Error.npdtype))

def load_track_shms():
    """Method to attempt to connect to tracking processing shms"""

    global Track_stat, Track_img

    if type(Track_stat) is str:
        try: Track_stat = Shm(Track_stat)
        except: pass

    if type(Track_img) is str:
        try: Track_img = Shm(Track_img)
        except: pass

def load_bias(header):
    """Method to load a bias file and compute the badpixelmap

    Args:
        header = a fits header formatted like TC_cmds._get_header
    Returns:
        None
    """

    global _bias, _bpm

    # format bias file name based on camera parameters from header
    fname = tc.b_dir + tc.b_fname.format(fps = header["fps"], tint = header["tint"],
        ndr = header["ndr"], temp = header["t_setp"], lb = header["crop_LB"], rb = header["crop_RB"],
        ub = header["crop_UB"], bb = header["crop_BB"])

    crop = False
    # if bias file doesn't exist, check for bias file with full crop
    if not os.path.isfile(fname):
        fname = tc.b_dir + tc.b_fname.format(fps = header["fps"], tint = header["tint"],
            ndr = header["ndr"], temp = header["t_setp"], lb = 0, rb = 0,
            ub = 0, bb = 0) 
        crop = True
        # if bias file still doesn't exist, throw an error
        if not os.path.isfile(fname): raise BiasError("No bias file found")
    
    # load bias from file
    with fits.open(fname) as f:
        _bias = f[0].data

    # crop bias if we changed cropping
    if crop:
        _bias = _bias[header["crop_UB"]:header["crop_LB"], header["crop_RB"]:header["crop_LB"]]

    # if first 4 image bits are in bias, copy over them in case of tags
    if header["crop_UB"] == 0 and header["crop_LB"] < 4:
        _bias[0][:4] = _bias[0][4]

def roll_avg(avg:np.array, raw:list):
    """A method that refreshes the average

    Pulls a new image, appends it to raw, removes the first element in raw,
        then checks to make sure that raw is long enough

    If the new frame pulled is a of a different size, a whole new avg will be created

    Args:
        avg = the current rolling average
            (if None, a new one will be created from scratch)
        raw = a list of raw frames corresponding to the given average
    Returns:
        (np.array, [np.array]) = the averaged frames, a list of raw frames
    """

    old_frames = []
    old_len = len(raw)
    # pop at least one frame
    if len(raw) >= 1:
        old_frames = [raw.pop(0) for _ in range(0, len(raw) - Avg_cnt.get_data()[0] + 1)]

    # fill out avg buffer
    new_frames = [tc.Img.get_data(True, reform=True) for _ in range(0, Avg_cnt.get_data()[0] - len(raw))]
    raw += new_frames

    # make sure that all our frames are the same size
    while(raw[0].shape != raw[-1].shape):
        old_frames.append(raw.pop(0))
        new_frames.append(tc.Img.get_data(True, reform=True))
        raw.append(new_frames[-1])

    # case 1: we have all new frames, throw out avg and remake
    if len(new_frames) >= len(raw):
        avg = np.mean(raw, 0)
        avg[0][:4] = avg[0][4]
        return avg, raw
    # case 2: the more likely one, we can use avg to cut down the calculations needed
    else:
        avg = (avg*old_len - np.sum(old_frames, 0) + np.sum(new_frames, 0)) / len(raw)
        # copy over first four pixels
        avg[0][:4] = avg[0][4]

        return avg, raw

def close(*args, **kwargs):
    """Method to perform a clean close"""

    # delete Set shm to indicate that control script is off
    try: os.remove(Stat.fname)
    except Exception as ouch: print("Exception on close {}".format(ouch))

    unregister(close)

    # kill tmux session
    ses = config.get("Environment", "session")
    win = config.get("Environment", "window")

    Popen(["tmux", "kill-window", "-t" "{}:{}".format(ses, win)])

def signal_handler(*args, **kwargs):
    """A method to end execution when a signal is recieved"""

    global alive
    alive = False

    # try to wake up main if it's waiting for processing to start
    try: Stat.sem.release()
    except: pass

# get RELDIR location which has all kroot made files
RELDIR = os.environ.get("RELDIR")
if RELDIR[-1] == "/": RELDIR = RELDIR[:-1]

# read config file in the data subdirectory of RELDIR
config = ConfigParser()
config.read(RELDIR+"/data/Track_Cam_vis_process.ini")

# make folder for shared memories if it doesn't exist
if not os.path.isdir("/tmp/Vis_Process"): os.mkdir("/tmp/Vis_Process")

# create a dictionary to translate strings into numpy data types
type_ = {"int8":np.int8, "int16":np.int16, "int32":np.int32, "int64":np.int64,
    "uint8":np.uint8, "uint16":np.uint16, "uint32":np.uint32,
    "uint64":np.uint64, "intp":np.intp, "uintp":np.uintp, "float16":np.float16,
    "float32":np.float32, "float64":np.float64, "complex64":np.complex64,
    "complex128":np.complex128, "U":np.dtype("<U1")}

# check if there's another control script running by checking
#   for the existence of some shms that get deleted when control
#   script ends

Stat = config.get("Shm Info", "Stat").split(",")
if os.path.isfile(Stat[0]):
    print("Active control script exists.")
    msg = "Stat shm exists, meaning another control script is running."
    raise ScriptAlreadyActive(msg)
else:
    Stat = Shm(Stat[0], data=np.array([1], dtype=type_[Stat[1]]),
        mmap = (Stat[2] == "1"))

Scale   = config.get("Shm Info", "Scale").split(",")
Avg_cnt = config.get("Shm Info", "Avg_cnt").split(",")
Ref     = config.get("Shm Info", "Ref").split(",")
Proc    = config.get("Shm Info", "Proc").split(",")
Bkgrd   = config.get("Shm Info", "Bkgrd").split(",")
Error   = config.get("Shm Info", "Error").split(",")

if os.path.isfile(Scale[0]): Scale = Shm(Scale[0])
else: Scale = Shm(Scale[0], data = np.array([0], dtype = type_[Scale[1]]),
        mmap = (Scale[2] == "1"))

if os.path.isfile(Avg_cnt[0]): Avg_cnt = Shm(Avg_cnt[0])
else: Avg_cnt = Shm(Avg_cnt[0], data = np.array([5], dtype = type_[Avg_cnt[1]]),
        mmap = (Avg_cnt[2] == "1"))

if os.path.isfile(Proc[0]): Proc = Shm(Proc[0])
else: Proc = Shm(Proc[0], data = np.zeros([640, 512], dtype = type_[Proc[1]]),
        mmap = (Proc[2] == "1"), croppable = True)

if os.path.isfile(Ref[0]): Ref = Shm(Ref[0])
else: Ref = Shm(Ref[0], data = "/nfiudata/reference")

if os.path.isfile(Bkgrd[0]): Bkgrd = Shm(Bkgrd[0])
else: Bkgrd = Shm(Bkgrd[0], data = "/nfiudata/background")

if os.path.isfile(Error[0]): Error = Shm(Error[0])
else: Error = Shm(Error[0], data = np.array([0], dtype = type_[Error[1]]),
        mmap = (Error[2] == "1"))

# register cleanup after shm initialization so that they
#   get cleaned up before being deleted
register(close)
signal(SIGHUP, signal_handler)
signal(SIGTERM, signal_handler)

# get tracking proc shms 
track_conf = ConfigParser()
track_conf.read(RELDIR+"/data/Track_Cam_tracking_process.ini")

# connect to img
Track_img = track_conf.get("Shm Info", "Track_proc").split(",")[0]
if os.path.isfile(Track_img[0]): Track_img = Shm(Track_img, sem = True)

# connect to stat
Track_stat = track_conf.get("Shm Info", "Stat").split(",")[0]
if os.path.isfile(Track_stat[0]): Track_stat = Shm(Track_stat, sem = True)

# instantiate TC_cmds
tc = TC_cmds()

# make variables to hold bad pixel map and the various frames
_bpm = None
_bias = None
_bkgrd = None
_ref = None

# make variables for roll_avg
avg = None
raw = []

# make variable to store camera parameters
head = None

# variable to store whether control script is running
alive = True

# start main method
while alive: main()